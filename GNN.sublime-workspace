{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"print_m",
				"print_metric_summary"
			],
			[
				"test_",
				"test_metrics_per_epoch"
			],
			[
				"Custom",
				"CustomSAGE"
			],
			[
				"hidden_",
				"hidden_layers"
			],
			[
				"num_node",
				"num_node_features"
			],
			[
				"visu",
				"visualize"
			],
			[
				"viu",
				"visualization"
			],
			[
				"tor",
				"torch_geometric"
			],
			[
				"Data",
				"DataLoader"
			],
			[
				"torc",
				"torch_geometric"
			],
			[
				"SUPP",
				"SUPPORTED_METRIC_NAMES"
			],
			[
				"class",
				"classmethod"
			],
			[
				"edge",
				"edge_dim"
			],
			[
				"num_",
				"data.num_nodes"
			],
			[
				"model",
				"job_model"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Package Control Messages\n========================\n\n\nMarkdownEditing\n---------------\n\n  # MarkdownEditing 3.1.12 Changelog\n  \n  Your _MarkdownEditing_ plugin is updated. Enjoy new version. For any type of\n  feedback you can use [GitHub issues][issues].\n  \n  ## Bug Fixes\n  \n  - fix AutoHotKey scopes and context names\n  - unfold links if `mde.auto_fold_link.enabled` is set false (fixes #742)\n  \n  ## New Features\n  \n  - syntax highlighting for TOML frontmatters (closes #736)\n  - syntax highlighting and snippets for Github Alerts (closes #743)\n  - allow disabling list bullet auto insertion/removal (closes #744)\n  \n  ## Changes\n  \n  [issues]: https://github.com/SublimeText-Markdown/MarkdownEditing/issues\n",
			"settings":
			{
				"buffer_size": 708,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"package_control_message",
					{
						"message": "\n\nMarkdownEditing\n---------------\n\n  # MarkdownEditing 3.1.12 Changelog\n  \n  Your _MarkdownEditing_ plugin is updated. Enjoy new version. For any type of\n  feedback you can use [GitHub issues][issues].\n  \n  ## Bug Fixes\n  \n  - fix AutoHotKey scopes and context names\n  - unfold links if `mde.auto_fold_link.enabled` is set false (fixes #742)\n  \n  ## New Features\n  \n  - syntax highlighting for TOML frontmatters (closes #736)\n  - syntax highlighting and snippets for Github Alerts (closes #743)\n  - allow disabling list bullet auto insertion/removal (closes #744)\n  \n  ## Changes\n  \n  [issues]: https://github.com/SublimeText-Markdown/MarkdownEditing/issues\n"
					},
					"AQAAAAAAAAAAAAAAxAIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/training/train_eval.py",
			"settings":
			{
				"buffer_size": 5106,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " device="
					},
					"CAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVAAAAAAAAAJUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ0AAAAAAAAAnwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "cpu"
					},
					"AwAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAAAAAAAAAJ4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					7,
					"left_delete",
					null,
					"BwAAAKIAAAAAAAAAogAAAAAAAAABAAAAKaEAAAAAAAAAoQAAAAAAAAABAAAAJ6AAAAAAAAAAoAAAAAAAAAABAAAAdZ8AAAAAAAAAnwAAAAAAAAABAAAAcJ4AAAAAAAAAngAAAAAAAAABAAAAY50AAAAAAAAAnQAAAAAAAAABAAAAJ5wAAAAAAAAAnAAAAAAAAAABAAAAPQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjAAAAAAAAAKMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ0AAAAAAAAAnwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJ0AAAAAAAAAnQAAAAAAAAABAAAAJ50AAAAAAAAAnQAAAAAAAAABAAAAJw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAAAAAAAAAJ4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "Npne'"
					},
					"BQAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					4,
					"left_delete",
					null,
					"BAAAAKEAAAAAAAAAoQAAAAAAAAABAAAAJ6AAAAAAAAAAoAAAAAAAAAABAAAAZZ8AAAAAAAAAnwAAAAAAAAABAAAAbp4AAAAAAAAAngAAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "one)"
					},
					"BAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAAAAAAAAAJ4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\nd"
					},
					"AwAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABeAQAAAAAAAAAAAABeAQAAAAAAAF8BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAQAAAAAAAFUBAAAAAAAA////////738"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAF4BAAAAAAAAXgEAAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfAQAAAAAAAF8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "self.device"
					},
					"CwAAAF4BAAAAAAAAXwEAAAAAAAAAAAAAXwEAAAAAAABgAQAAAAAAAAAAAABgAQAAAAAAAGEBAAAAAAAAAAAAAGEBAAAAAAAAYgEAAAAAAAAAAAAAYgEAAAAAAABjAQAAAAAAAAAAAABjAQAAAAAAAGQBAAAAAAAAAAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABmAQAAAAAAAAAAAABmAQAAAAAAAGcBAAAAAAAAAAAAAGcBAAAAAAAAaAEAAAAAAAAAAAAAaAEAAAAAAABpAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeAQAAAAAAAF4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGkBAAAAAAAAagEAAAAAAAAAAAAAagEAAAAAAABrAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpAQAAAAAAAGkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAQAAAAAAAGsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "device"
					},
					"BgAAAGwBAAAAAAAAbQEAAAAAAAAAAAAAbQEAAAAAAABuAQAAAAAAAAAAAABuAQAAAAAAAG8BAAAAAAAAAAAAAG8BAAAAAAAAcAEAAAAAAAAAAAAAcAEAAAAAAABxAQAAAAAAAAAAAABxAQAAAAAAAHIBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAQAAAAAAAGwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAB0AQAAAAAAAHUBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByAQAAAAAAAHIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " torch."
					},
					"BwAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAB6AQAAAAAAAHsBAAAAAAAAAAAAAHsBAAAAAAAAfAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AQAAAAAAAHUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "device"
					},
					"BgAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAfQEAAAAAAAB+AQAAAAAAAAAAAAB+AQAAAAAAAH8BAAAAAAAAAAAAAH8BAAAAAAAAgAEAAAAAAAAAAAAAgAEAAAAAAACBAQAAAAAAAAAAAACBAQAAAAAAAIIBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AQAAAAAAAHwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIIBAAAAAAAAhAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCAQAAAAAAAIIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIMBAAAAAAAAhQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAQAAAAAAAIMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "cpu"
					},
					"AwAAAIQBAAAAAAAAhQEAAAAAAAAAAAAAhQEAAAAAAACGAQAAAAAAAAAAAACGAQAAAAAAAIcBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAQAAAAAAAIQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\ndata"
					},
					"BwAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAgAwAAAAAAAAAAAAAgAwAAAAAAACQDAAAAAAAAAAAAACQDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAAAmAwAAAAAAACcDAAAAAAAAAAAAACcDAAAAAAAAKAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXAwAAAAAAABcDAAAAAAAA////////738"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACgDAAAAAAAAKQMAAAAAAAAAAAAAKQMAAAAAAAAqAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAwAAAAAAACgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " data.t"
					},
					"BwAAACoDAAAAAAAAKwMAAAAAAAAAAAAAKwMAAAAAAAAsAwAAAAAAAAAAAAAsAwAAAAAAAC0DAAAAAAAAAAAAAC0DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAADADAAAAAAAAAAAAADADAAAAAAAAMQMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAwAAAAAAACoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADEDAAAAAAAAMgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxAwAAAAAAADEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					2,
					"left_delete",
					null,
					"AgAAADEDAAAAAAAAMQMAAAAAAAABAAAAbzADAAAAAAAAMAMAAAAAAAABAAAAdA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAwAAAAAAADIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "to"
					},
					"AgAAADADAAAAAAAAMQMAAAAAAAAAAAAAMQMAAAAAAAAyAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAwAAAAAAADADAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADIDAAAAAAAANAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAwAAAAAAADIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": "dev"
					},
					"AwAAADMDAAAAAAAANAMAAAAAAAAAAAAANAMAAAAAAAA1AwAAAAAAAAAAAAA1AwAAAAAAADYDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAwAAAAAAADMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					3,
					"left_delete",
					null,
					"AwAAADUDAAAAAAAANQMAAAAAAAABAAAAdjQDAAAAAAAANAMAAAAAAAABAAAAZTMDAAAAAAAAMwMAAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AwAAAAAAADYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "sef"
					},
					"AwAAADMDAAAAAAAANAMAAAAAAAAAAAAANAMAAAAAAAA1AwAAAAAAAAAAAAA1AwAAAAAAADYDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAwAAAAAAADMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"left_delete",
					null,
					"AQAAADUDAAAAAAAANQMAAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AwAAAAAAADYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "lf.dv"
					},
					"BQAAADUDAAAAAAAANgMAAAAAAAAAAAAANgMAAAAAAAA3AwAAAAAAAAAAAAA3AwAAAAAAADgDAAAAAAAAAAAAADgDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA6AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AwAAAAAAADUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"left_delete",
					null,
					"AQAAADkDAAAAAAAAOQMAAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AwAAAAAAADoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "evice"
					},
					"BQAAADkDAAAAAAAAOgMAAAAAAAAAAAAAOgMAAAAAAAA7AwAAAAAAAAAAAAA7AwAAAAAAADwDAAAAAAAAAAAAADwDAAAAAAAAPQMAAAAAAAAAAAAAPQMAAAAAAAA+AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5AwAAAAAAADkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "\ndata"
					},
					"BwAAAOYIAAAAAAAA5wgAAAAAAAAAAAAA5wgAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPMIAAAAAAAAAAAAAPMIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD1CAAAAAAAAAAAAAD1CAAAAAAAAPYIAAAAAAAAAAAAAPYIAAAAAAAA9wgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmCAAAAAAAAOYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD5CAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3CAAAAAAAAPcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": " data.to_de"
					},
					"CwAAAPkIAAAAAAAA+ggAAAAAAAAAAAAA+ggAAAAAAAD7CAAAAAAAAAAAAAD7CAAAAAAAAPwIAAAAAAAAAAAAAPwIAAAAAAAA/QgAAAAAAAAAAAAA/QgAAAAAAAD+CAAAAAAAAAAAAAD+CAAAAAAAAP8IAAAAAAAAAAAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5CAAAAAAAAPkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					3,
					"left_delete",
					null,
					"AwAAAAMJAAAAAAAAAwkAAAAAAAABAAAAZQIJAAAAAAAAAgkAAAAAAAABAAAAZAEJAAAAAAAAAQkAAAAAAAABAAAAXw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAECQAAAAAAAAQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAEJAAAAAAAAAwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABCQAAAAAAAAEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "devuice"
					},
					"BwAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAAUJAAAAAAAAAAAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAHCQAAAAAAAAAAAAAHCQAAAAAAAAgJAAAAAAAAAAAAAAgJAAAAAAAACQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCQAAAAAAAAIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					275,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAAdQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGCQAAAAAAAAYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAAUJAAAAAAAAAAAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAHCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCQAAAAAAAAIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					331,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAA4JAAAAAAAADwkAAAAAAAAAAAAADwkAAAAAAAAbCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHCQAAAAAAAAcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					332,
					1,
					"cut",
					null,
					"AQAAAA8JAAAAAAAADwkAAAAAAAANAAAAICAgICAgICAgICAgCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbCQAAAAAAABsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYKAAAAAAAAxwoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCgAAAAAAAMYKAAAAAAAAAAAAAAAAAAA"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYKAAAAAAAAxwoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCgAAAAAAAMYKAAAAAAAAAAAAAAAAAAA"
				],
				[
					370,
					1,
					"reindent",
					null,
					"AQAAAMcKAAAAAAAAzwoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHCgAAAAAAAMcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					371,
					1,
					"left_delete",
					null,
					"AQAAAMsKAAAAAAAAywoAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPCgAAAAAAAM8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAMsKAAAAAAAAzAoAAAAAAAAAAAAAzAoAAAAAAADNCgAAAAAAAAAAAADNCgAAAAAAAM4KAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLCgAAAAAAAMsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " draw_metri"
					},
					"CwAAAM4KAAAAAAAAzwoAAAAAAAAAAAAAzwoAAAAAAADQCgAAAAAAAAAAAADQCgAAAAAAANEKAAAAAAAAAAAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADTCgAAAAAAAAAAAADTCgAAAAAAANQKAAAAAAAAAAAAANQKAAAAAAAA1QoAAAAAAAAAAAAA1QoAAAAAAADWCgAAAAAAAAAAAADWCgAAAAAAANcKAAAAAAAAAAAAANcKAAAAAAAA2AoAAAAAAAAAAAAA2AoAAAAAAADZCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOCgAAAAAAAM4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "cs"
					},
					"AgAAANkKAAAAAAAA2goAAAAAAAAAAAAA2goAAAAAAADbCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZCgAAAAAAANkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					375,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANsKAAAAAAAA3QoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbCgAAAAAAANsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAANwKAAAAAAAA3QoAAAAAAAAAAAAA3QoAAAAAAADeCgAAAAAAAAAAAADeCgAAAAAAAN8KAAAAAAAAAAAAAN8KAAAAAAAA4AoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcCgAAAAAAANwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOAKAAAAAAAA4QoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgCgAAAAAAAOAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOEKAAAAAAAA4goAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCgAAAAAAAOEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					388,
					1,
					"paste",
					null,
					"AQAAAOIKAAAAAAAA+QoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiCgAAAAAAAOIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPkKAAAAAAAA+goAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5CgAAAAAAAPkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoKAAAAAAAA+woAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CgAAAAAAAPoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					398,
					1,
					"paste",
					null,
					"AQAAAPsKAAAAAAAAEQsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7CgAAAAAAAPsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABILAAAAAAAAEwsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASCwAAAAAAABILAAAAAAAAAAAAAAAA8L8"
				],
				[
					407,
					1,
					"cut",
					null,
					"AQAAALwNAAAAAAAAvA0AAAAAAADFAQAAICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEwLCAxMCkpCiAgICAgICAgZm9yIG1ldHJpY19pZHgsIG1ldHJpY19uYW1lIGluIGVudW1lcmF0ZShzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMpOgogICAgICAgICAgICBwbHQuc3VicGxvdCgzLCAyLCBtZXRyaWNfaWR4ICsgMSkKICAgICAgICAgICAgcGx0LnBsb3QoW3RbbWV0cmljX2lkeF0gZm9yIHQgaW4gdHJhaW5fbWV0cmljc19wZXJfZXBvY2hdLAogICAgICAgICAgICAgICAgICAgICBsYWJlbD0ndHJhaW4nKQogICAgICAgICAgICBwbHQucGxvdChbdFttZXRyaWNfaWR4XSBmb3IgdCBpbiB0ZXN0X21ldHJpY3NfcGVyX2Vwb2NoXSwKICAgICAgICAgICAgICAgICAgICAgbGFiZWw9J3Rlc3QnKQogICAgICAgICAgICBwbHQubGVnZW5kKCkKICAgICAgICAgICAgcGx0LnRpdGxlKG1ldHJpY19uYW1lKQogICAgICAgIHBsdC5zaG93KCkK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8DQAAAAAAAIEPAAAAAAAAAAAAAAAAAAA"
				],
				[
					409,
					1,
					"paste",
					null,
					"AQAAABQLAAAAAAAA2QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUCwAAAAAAABQLAAAAAAAAAAAAAAAAAAA"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAH8PAAAAAAAAgA8AAAAAAAAAAAAAgA8AAAAAAACMDwAAAAAAAAAAAACMDwAAAAAAAI0PAAAAAAAAAAAAAI0PAAAAAAAAmQ8AAAAAAAAAAAAAgA8AAAAAAACADwAAAAAAAAwAAAAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/DwAAAAAAAH8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					414,
					1,
					"left_delete",
					null,
					"AQAAAIkPAAAAAAAAiQ8AAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNDwAAAAAAAI0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "self.draw"
					},
					"CQAAAIkPAAAAAAAAig8AAAAAAAAAAAAAig8AAAAAAACLDwAAAAAAAAAAAACLDwAAAAAAAIwPAAAAAAAAAAAAAIwPAAAAAAAAjQ8AAAAAAAAAAAAAjQ8AAAAAAACODwAAAAAAAAAAAACODwAAAAAAAI8PAAAAAAAAAAAAAI8PAAAAAAAAkA8AAAAAAAAAAAAAkA8AAAAAAACRDwAAAAAAAAAAAACRDwAAAAAAAJIPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJDwAAAAAAAIkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					1,
					"insert_completion",
					{
						"completion": "draw_metrics",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "draw_metrics"
					},
					"AgAAAI4PAAAAAAAAjg8AAAAAAAAEAAAAZHJhd44PAAAAAAAAmg8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSDwAAAAAAAJIPAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoPAAAAAAAAnA8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaDwAAAAAAAJoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					426,
					1,
					"paste",
					null,
					"AQAAAJsPAAAAAAAAyg8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbDwAAAAAAAJsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "\n\nself.print"
					},
					"DwAAAMsPAAAAAAAAzA8AAAAAAAAAAAAAzA8AAAAAAADUDwAAAAAAAAAAAADUDwAAAAAAANUPAAAAAAAAAAAAANUPAAAAAAAA3Q8AAAAAAAAAAAAAzA8AAAAAAADMDwAAAAAAAAgAAAAgICAgICAgINUPAAAAAAAA1g8AAAAAAAAAAAAA1g8AAAAAAADXDwAAAAAAAAAAAADXDwAAAAAAANgPAAAAAAAAAAAAANgPAAAAAAAA2Q8AAAAAAAAAAAAA2Q8AAAAAAADaDwAAAAAAAAAAAADaDwAAAAAAANsPAAAAAAAAAAAAANsPAAAAAAAA3A8AAAAAAAAAAAAA3A8AAAAAAADdDwAAAAAAAAAAAADdDwAAAAAAAN4PAAAAAAAAAAAAAN4PAAAAAAAA3w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDwAAAAAAAMsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": "_metric_sum"
					},
					"CwAAAN8PAAAAAAAA4A8AAAAAAAAAAAAA4A8AAAAAAADhDwAAAAAAAAAAAADhDwAAAAAAAOIPAAAAAAAAAAAAAOIPAAAAAAAA4w8AAAAAAAAAAAAA4w8AAAAAAADkDwAAAAAAAAAAAADkDwAAAAAAAOUPAAAAAAAAAAAAAOUPAAAAAAAA5g8AAAAAAAAAAAAA5g8AAAAAAADnDwAAAAAAAAAAAADnDwAAAAAAAOgPAAAAAAAAAAAAAOgPAAAAAAAA6Q8AAAAAAAAAAAAA6Q8AAAAAAADqDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDwAAAAAAAN8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "mary"
					},
					"BAAAAOoPAAAAAAAA6w8AAAAAAAAAAAAA6w8AAAAAAADsDwAAAAAAAAAAAADsDwAAAAAAAO0PAAAAAAAAAAAAAO0PAAAAAAAA7g8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqDwAAAAAAAOoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO4PAAAAAAAA8A8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					434,
					1,
					"paste",
					null,
					"AQAAAO8PAAAAAAAAHhAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvDwAAAAAAAO8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"cut",
					null,
					"AQAAACIQAAAAAAAAIhAAAAAAAABRAwAAICAgICAgICB0ZXN0X2YxID0gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMV1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KAogICAgICAgICAgICAnZjEnKV0KICAgICAgICB0ZXN0X2YxX2xhc3QxMCA9IG5wLm1lYW4oW2l0ZW1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdmMScpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMTA6XV0pCiAgICAgICAgdGVzdF9hY2N1cmFjeSA9IHRlc3RfbWV0cmljc19wZXJfZXBvY2hbLTFdWwogICAgICAgICAgICBzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMuaW5kZXgoJ2FjY3VyYWN5JyldCiAgICAgICAgdHJhaW5fZjEgPSB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaFstMV1bCiAgICAgICAgICAgIHNlbGYuU1VQUE9SVEVEX01FVFJJQ19OQU1FUy5pbmRleCgnZjEnKV0KICAgICAgICB0cmFpbl9hY2N1cmFjeSA9IHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoWy0xXVsKICAgICAgICAgICAgc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdhY2N1cmFjeScpXQoKICAgICAgICBwcmludCgoInwgVGVzdCBGMSB8IFRlc3QgRjEgMTAgfCBUZXN0IEFjY3VyYWN5IHwgVHJhaW4gRjEgIgogICAgICAgICAgICAgICAifCBUcmFpbiBBY2N1cmFjeSB8IikpCiAgICAgICAgcHJpbnQoInwtLS18LS0tfC0tLXwtLS18LS0tfCIpCiAgICAgICAgcHJpbnQoKGYifCB7dGVzdF9mMX0gfCB7dGVzdF9mMV9sYXN0MTB9IHwge3Rlc3RfYWNjdXJhY3l9IHwge3RyYWluX2YxfSIKICAgICAgICAgICAgICAgZiIgfCB7dHJhaW5fYWNjdXJhY3l9IHwiKSkK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiEAAAAAAAAHMTAAAAAAAAAAAAAAAAAAA"
				],
				[
					443,
					1,
					"left_delete",
					null,
					"AQAAACEQAAAAAAAAIRAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiEAAAAAAAACIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANkMAAAAAAAA2gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZDAAAAAAAANkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANkMAAAAAAAA2gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZDAAAAAAAANkMAAAAAAAAAAAAAAAAAAA"
				],
				[
					451,
					1,
					"reindent",
					null,
					"AQAAANoMAAAAAAAA4gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaDAAAAAAAANoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					1,
					"left_delete",
					null,
					"AQAAAN4MAAAAAAAA3gwAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiDAAAAAAAAOIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAN4MAAAAAAAA3wwAAAAAAAAAAAAA3wwAAAAAAADgDAAAAAAAAAAAAADgDAAAAAAAAOEMAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeDAAAAAAAAN4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": " print_m"
					},
					"CAAAAOEMAAAAAAAA4gwAAAAAAAAAAAAA4gwAAAAAAADjDAAAAAAAAAAAAADjDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA5QwAAAAAAAAAAAAA5QwAAAAAAADmDAAAAAAAAAAAAADmDAAAAAAAAOcMAAAAAAAAAAAAAOcMAAAAAAAA6AwAAAAAAAAAAAAA6AwAAAAAAADpDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhDAAAAAAAAOEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					457,
					1,
					"insert_completion",
					{
						"completion": "print_metric_summary",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "print_metric_summary"
					},
					"AgAAAOIMAAAAAAAA4gwAAAAAAAAHAAAAcHJpbnRfbeIMAAAAAAAA9gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpDAAAAAAAAOkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					458,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPYMAAAAAAAA+AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DAAAAAAAAPYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPgMAAAAAAAA+QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DAAAAAAAAPgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPkMAAAAAAAA+gwAAAAAAAAAAAAA+gwAAAAAAAD+DAAAAAAAAAAAAAD+DAAAAAAAAAINAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DAAAAAAAAPkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					463,
					1,
					"paste",
					null,
					"AQAAAPoMAAAAAAAASxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DAAAAAAAAPoMAAAAAAAAAAAAAAAAAAA"
				],
				[
					471,
					3,
					"right_delete",
					null,
					"BAAAAPcMAAAAAAAA9wwAAAAAAAABAAAAKUoQAAAAAAAAShAAAAAAAAAIAAAAICAgICAgICD3DAAAAAAAAPcMAAAAAAAAAQAAADr3DAAAAAAAAPcMAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					472,
					1,
					"paste",
					null,
					"AQAAAPcMAAAAAAAALg0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4NAAAAAAAALw0AAAAAAAAAAAAALw0AAAAAAAAzDQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuDQAAAAAAAC4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					474,
					1,
					"unindent",
					null,
					"AQAAAC8NAAAAAAAALw0AAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzDQAAAAAAADMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHMPAAAAAAAAdA8AAAAAAAAAAAAAdA8AAAAAAACADwAAAAAAAAAAAACADwAAAAAAAIEPAAAAAAAAAAAAAIEPAAAAAAAAjQ8AAAAAAAAAAAAAdA8AAAAAAAB0DwAAAAAAAAwAAAAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzDwAAAAAAAHMPAAAAAAAA////////738"
				],
				[
					481,
					1,
					"left_delete",
					null,
					"AQAAAH0PAAAAAAAAfQ8AAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBDwAAAAAAAIEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOUPAAAAAAAA5g8AAAAAAAAAAAAAdQ8AAAAAAAB1DwAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlDwAAAAAAAOUPAAAAAAAAAAAAAAAA8L8"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAJoPAAAAAAAAmw8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaDwAAAAAAAJoPAAAAAAAAAAAAAACwc0A"
				],
				[
					502,
					1,
					"left_delete",
					null,
					"AQAAAJoPAAAAAAAAmg8AAAAAAAABAAAAdA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbDwAAAAAAAJsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					522,
					2,
					"cut",
					null,
					"AgAAAHUPAAAAAAAAdQ8AAAAAAAABAAAACnUPAAAAAAAAdQ8AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1DwAAAAAAAHUPAAAAAAAAAAAAAACAdkA"
				],
				[
					541,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 5066,
						"text": "from matplotlib import pyplot as plt\nimport logging\nimport numpy as np\nimport torch\n\n\nclass TrainEval(object):\n    def __init__(self, model_instance, device=None):\n        self.optimizer = torch.optim.Adam(model_instance.parameters(), lr=0.01)\n        self.criterion = torch.nn.CrossEntropyLoss()\n        self.model_instance = model_instance\n        self.device = device or torch.device('cpu')\n\n    def run_model(self, data, model):\n        return model(data.x, data.edge_index, data.batch)\n\n    def test(self, model, loader):\n        model.eval()\n        # print('[before test] lin sum^2:', torch.pow(model.lin.weight, 2).sum())\n\n        tp = 0\n        fn = 0\n        fp = 0\n        first_batch = True\n        # Iterate in batches over the training/test dataset.\n        for data in loader:\n            data = data.to(self.device)\n            out = self.run_model(data, model)\n            # print('out:', out)\n            pred = out.argmax(dim=1)  # Use the class with highest probability.\n            if first_batch:\n                logging.debug(f'first batch out[:5]: {out[:5]}')\n                first_batch = False\n            tp += int(((pred == 1)*(data.y == 1)).sum())\n            fn += int(((pred == 0)*(data.y == 1)).sum())\n            fp += int(((pred == 1)*(data.y == 0)).sum())\n\n        total = len(loader.dataset)\n        accuracy = (total - fp - fn) / total\n        precision = tp / (tp + fp + 1e-9)\n        recall = tp / (tp + fn + 1e-9)\n        f1 = 2*recall*precision / (recall + precision + 1e-9)\n        # print(f'total={total}, tp={tp}, fp={fp}, fn={fn}')\n        return accuracy, precision, recall, total, f1\n\n    SUPPORTED_METRIC_NAMES = ['accuracy', 'precision', 'recall', 'size', 'f1']\n\n    def fmt(self, metric_tuple):\n        output = []\n        for metric_idx, metric_name in enumerate(self.SUPPORTED_METRIC_NAMES):\n            metric_fmt = f\"{metric_name}={metric_tuple[metric_idx]:.4f}\"\n            output.append(metric_fmt)\n\n        return \", \".join(output)\n\n    def train(self, model, criterion, optimizer, train_loader):\n        model.train()\n\n        # logging.debug(f'[before training] lin sum^2: '\n        #               f'{torch.pow(model.lin.weight, 2).sum()}')\n\n        for data in train_loader:  # Iterate in batches over the training ds\n            data = data.to(self.device)\n            out = self.run_model(data, model)\n            # print('out:', out)\n            loss = criterion(out, data.y)  # Compute the loss.\n            loss.backward()  # Derive gradients.\n            optimizer.step()  # Update parameters based on gradients.\n            optimizer.zero_grad()  # Clear gradients.\n\n        # logging.debug(f'[after training] lin sum^2: '\n        #               f'{torch.pow(model.lin.weight, 2).sum()}')\n\n    def draw_metrics(self, train_metrics_per_epoch, test_metrics_per_epoch):\n        plt.figure(figsize=(10, 10))\n        for metric_idx, metric_name in enumerate(self.SUPPORTED_METRIC_NAMES):\n            plt.subplot(3, 2, metric_idx + 1)\n            plt.plot([t[metric_idx] for t in train_metrics_per_epoch],\n                     label='train')\n            plt.plot([t[metric_idx] for t in test_metrics_per_epoch],\n                     label='test')\n            plt.legend()\n            plt.title(metric_name)\n        plt.show()\n\n    def print_metric_summary(self, train_metrics_per_epoch, test_metrics_per_epoch):\n        test_f1 = test_metrics_per_epoch[-1][self.SUPPORTED_METRIC_NAMES.index(\n            'f1')]\n        test_f1_last10 = np.mean([item[self.SUPPORTED_METRIC_NAMES.index('f1')]\n                                  for item in test_metrics_per_epoch[-10:]])\n        test_accuracy = test_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('accuracy')]\n        train_f1 = train_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('f1')]\n        train_accuracy = train_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('accuracy')]\n\n        print((\"| Test F1 | Test F1 10 | Test Accuracy | Train F1 \"\n               \"| Train Accuracy | \"))\n        print(\"|---|---|---|---|---|\")\n        print((f\"| {test_f1} | {test_f1_last10} | {test_accuracy} | {train_f1}\"\n               f\" | {train_accuracy} |\"))\n\n    def main(self, epoch, train_loader, test_loader):\n        train_metrics_per_epoch = []\n        test_metrics_per_epoch = []\n\n        for epoch_id in range(1, epoch+1):\n            self.train(self.model_instance, self.criterion,\n                       self.optimizer, train_loader)\n            train_metrics = self.test(self.model_instance, train_loader)\n            test_metrics = self.test(self.model_instance, test_loader)\n            print((f'Epoch: {epoch_id: 03d}, Train: {self.fmt(train_metrics)},'\n                   f' Test: {self.fmt(test_metrics)}'))\n            train_metrics_per_epoch.append(train_metrics)\n            test_metrics_per_epoch.append(test_metrics)\n\n        self.draw_metrics(train_metrics_per_epoch, test_metrics_per_epoch)\n\n        self.print_metric_summary(\n            train_metrics_per_epoch, test_metrics_per_epoch)\n"
					},
					"AQAAAAAAAAAAAAAA1RMAAAAAAADKEwAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmltcG9ydCBsb2dnaW5nCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgdG9yY2gKCgpjbGFzcyBUcmFpbkV2YWwob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtb2RlbF9pbnN0YW5jZSwgZGV2aWNlPU5vbmUpOgogICAgICAgIHNlbGYub3B0aW1pemVyID0gdG9yY2gub3B0aW0uQWRhbShtb2RlbF9pbnN0YW5jZS5wYXJhbWV0ZXJzKCksIGxyPTAuMDEpCiAgICAgICAgc2VsZi5jcml0ZXJpb24gPSB0b3JjaC5ubi5Dcm9zc0VudHJvcHlMb3NzKCkKICAgICAgICBzZWxmLm1vZGVsX2luc3RhbmNlID0gbW9kZWxfaW5zdGFuY2UKICAgICAgICBzZWxmLmRldmljZSA9IGRldmljZSBvciB0b3JjaC5kZXZpY2UoJ2NwdScpCgogICAgZGVmIHJ1bl9tb2RlbChzZWxmLCBkYXRhLCBtb2RlbCk6CiAgICAgICAgcmV0dXJuIG1vZGVsKGRhdGEueCwgZGF0YS5lZGdlX2luZGV4LCBkYXRhLmJhdGNoKQoKICAgIGRlZiB0ZXN0KHNlbGYsIG1vZGVsLCBsb2FkZXIpOgogICAgICAgIG1vZGVsLmV2YWwoKQogICAgICAgICMgcHJpbnQoJ1tiZWZvcmUgdGVzdF0gbGluIHN1bV4yOicsIHRvcmNoLnBvdyhtb2RlbC5saW4ud2VpZ2h0LCAyKS5zdW0oKSkKCiAgICAgICAgdHAgPSAwCiAgICAgICAgZm4gPSAwCiAgICAgICAgZnAgPSAwCiAgICAgICAgZmlyc3RfYmF0Y2ggPSBUcnVlCiAgICAgICAgIyBJdGVyYXRlIGluIGJhdGNoZXMgb3ZlciB0aGUgdHJhaW5pbmcvdGVzdCBkYXRhc2V0LgogICAgICAgIGZvciBkYXRhIGluIGxvYWRlcjoKICAgICAgICAgICAgZGF0YSA9IGRhdGEudG8oc2VsZi5kZXZpY2UpCiAgICAgICAgICAgIG91dCA9IHNlbGYucnVuX21vZGVsKGRhdGEsIG1vZGVsKQogICAgICAgICAgICAjIHByaW50KCdvdXQ6Jywgb3V0KQogICAgICAgICAgICBwcmVkID0gb3V0LmFyZ21heChkaW09MSkgICMgVXNlIHRoZSBjbGFzcyB3aXRoIGhpZ2hlc3QgcHJvYmFiaWxpdHkuCiAgICAgICAgICAgIGlmIGZpcnN0X2JhdGNoOgogICAgICAgICAgICAgICAgbG9nZ2luZy5kZWJ1ZyhmJ2ZpcnN0IGJhdGNoIG91dFs6NV06IHtvdXRbOjVdfScpCiAgICAgICAgICAgICAgICBmaXJzdF9iYXRjaCA9IEZhbHNlCiAgICAgICAgICAgIHRwICs9IGludCgoKHByZWQgPT0gMSkqKGRhdGEueSA9PSAxKSkuc3VtKCkpCiAgICAgICAgICAgIGZuICs9IGludCgoKHByZWQgPT0gMCkqKGRhdGEueSA9PSAxKSkuc3VtKCkpCiAgICAgICAgICAgIGZwICs9IGludCgoKHByZWQgPT0gMSkqKGRhdGEueSA9PSAwKSkuc3VtKCkpCgogICAgICAgIHRvdGFsID0gbGVuKGxvYWRlci5kYXRhc2V0KQogICAgICAgIGFjY3VyYWN5ID0gKHRvdGFsIC0gZnAgLSBmbikgLyB0b3RhbAogICAgICAgIHByZWNpc2lvbiA9IHRwIC8gKHRwICsgZnAgKyAxZS05KQogICAgICAgIHJlY2FsbCA9IHRwIC8gKHRwICsgZm4gKyAxZS05KQogICAgICAgIGYxID0gMipyZWNhbGwqcHJlY2lzaW9uIC8gKHJlY2FsbCArIHByZWNpc2lvbiArIDFlLTkpCiAgICAgICAgIyBwcmludChmJ3RvdGFsPXt0b3RhbH0sIHRwPXt0cH0sIGZwPXtmcH0sIGZuPXtmbn0nKQogICAgICAgIHJldHVybiBhY2N1cmFjeSwgcHJlY2lzaW9uLCByZWNhbGwsIHRvdGFsLCBmMQoKICAgIFNVUFBPUlRFRF9NRVRSSUNfTkFNRVMgPSBbJ2FjY3VyYWN5JywgJ3ByZWNpc2lvbicsICdyZWNhbGwnLCAnc2l6ZScsICdmMSddCgogICAgZGVmIGZtdChzZWxmLCBtZXRyaWNfdHVwbGUpOgogICAgICAgIG91dHB1dCA9IFtdCiAgICAgICAgZm9yIG1ldHJpY19pZHgsIG1ldHJpY19uYW1lIGluIGVudW1lcmF0ZShzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMpOgogICAgICAgICAgICBtZXRyaWNfZm10ID0gZiJ7bWV0cmljX25hbWV9PXttZXRyaWNfdHVwbGVbbWV0cmljX2lkeF06LjRmfSIKICAgICAgICAgICAgb3V0cHV0LmFwcGVuZChtZXRyaWNfZm10KQoKICAgICAgICByZXR1cm4gIiwgIi5qb2luKG91dHB1dCkKCiAgICBkZWYgdHJhaW4oc2VsZiwgbW9kZWwsIGNyaXRlcmlvbiwgb3B0aW1pemVyLCB0cmFpbl9sb2FkZXIpOgogICAgICAgIG1vZGVsLnRyYWluKCkKCiAgICAgICAgIyBsb2dnaW5nLmRlYnVnKGYnW2JlZm9yZSB0cmFpbmluZ10gbGluIHN1bV4yOiAnCiAgICAgICAgIyAgICAgICAgICAgICAgIGYne3RvcmNoLnBvdyhtb2RlbC5saW4ud2VpZ2h0LCAyKS5zdW0oKX0nKQoKICAgICAgICBmb3IgZGF0YSBpbiB0cmFpbl9sb2FkZXI6ICAjIEl0ZXJhdGUgaW4gYmF0Y2hlcyBvdmVyIHRoZSB0cmFpbmluZyBkcwogICAgICAgICAgICBkYXRhID0gZGF0YS50byhzZWxmLmRldmljZSkKICAgICAgICAgICAgb3V0ID0gc2VsZi5ydW5fbW9kZWwoZGF0YSwgbW9kZWwpCiAgICAgICAgICAgICMgcHJpbnQoJ291dDonLCBvdXQpCiAgICAgICAgICAgIGxvc3MgPSBjcml0ZXJpb24ob3V0LCBkYXRhLnkpICAjIENvbXB1dGUgdGhlIGxvc3MuCiAgICAgICAgICAgIGxvc3MuYmFja3dhcmQoKSAgIyBEZXJpdmUgZ3JhZGllbnRzLgogICAgICAgICAgICBvcHRpbWl6ZXIuc3RlcCgpICAjIFVwZGF0ZSBwYXJhbWV0ZXJzIGJhc2VkIG9uIGdyYWRpZW50cy4KICAgICAgICAgICAgb3B0aW1pemVyLnplcm9fZ3JhZCgpICAjIENsZWFyIGdyYWRpZW50cy4KCiAgICAgICAgIyBsb2dnaW5nLmRlYnVnKGYnW2FmdGVyIHRyYWluaW5nXSBsaW4gc3VtXjI6ICcKICAgICAgICAjICAgICAgICAgICAgICAgZid7dG9yY2gucG93KG1vZGVsLmxpbi53ZWlnaHQsIDIpLnN1bSgpfScpCgogICAgZGVmIGRyYXdfbWV0cmljcyhzZWxmLCB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaCwgdGVzdF9tZXRyaWNzX3Blcl9lcG9jaCk6CiAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSgxMCwgMTApKQogICAgICAgIGZvciBtZXRyaWNfaWR4LCBtZXRyaWNfbmFtZSBpbiBlbnVtZXJhdGUoc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTKToKICAgICAgICAgICAgcGx0LnN1YnBsb3QoMywgMiwgbWV0cmljX2lkeCArIDEpCiAgICAgICAgICAgIHBsdC5wbG90KFt0W21ldHJpY19pZHhdIGZvciB0IGluIHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoXSwKICAgICAgICAgICAgICAgICAgICAgbGFiZWw9J3RyYWluJykKICAgICAgICAgICAgcGx0LnBsb3QoW3RbbWV0cmljX2lkeF0gZm9yIHQgaW4gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaF0sCiAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSd0ZXN0JykKICAgICAgICAgICAgcGx0LmxlZ2VuZCgpCiAgICAgICAgICAgIHBsdC50aXRsZShtZXRyaWNfbmFtZSkKICAgICAgICBwbHQuc2hvdygpCgogICAgZGVmIHByaW50X21ldHJpY19zdW1tYXJ5KHNlbGYsIHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoLCB0ZXN0X21ldHJpY3NfcGVyX2Vwb2NoKToKICAgICAgICB0ZXN0X2YxID0gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMV1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KAogICAgICAgICAgICAnZjEnKV0KICAgICAgICB0ZXN0X2YxX2xhc3QxMCA9IG5wLm1lYW4oW2l0ZW1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdmMScpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMTA6XV0pCiAgICAgICAgdGVzdF9hY2N1cmFjeSA9IHRlc3RfbWV0cmljc19wZXJfZXBvY2hbLTFdWwogICAgICAgICAgICBzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMuaW5kZXgoJ2FjY3VyYWN5JyldCiAgICAgICAgdHJhaW5fZjEgPSB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaFstMV1bCiAgICAgICAgICAgIHNlbGYuU1VQUE9SVEVEX01FVFJJQ19OQU1FUy5pbmRleCgnZjEnKV0KICAgICAgICB0cmFpbl9hY2N1cmFjeSA9IHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoWy0xXVsKICAgICAgICAgICAgc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdhY2N1cmFjeScpXQoKICAgICAgICBwcmludCgoInwgVGVzdCBGMSB8IFRlc3QgRjEgMTAgfCBUZXN0IEFjY3VyYWN5IHwgVHJhaW4gRjEgIgogICAgICAgICAgICAgICAifCBUcmFpbiBBY2N1cmFjeSB8ICIpKQogICAgICAgIHByaW50KCJ8LS0tfC0tLXwtLS18LS0tfC0tLXwiKQogICAgICAgIHByaW50KChmInwge3Rlc3RfZjF9IHwge3Rlc3RfZjFfbGFzdDEwfSB8IHt0ZXN0X2FjY3VyYWN5fSB8IHt0cmFpbl9mMX0iCiAgICAgICAgICAgICAgIGYiIHwge3RyYWluX2FjY3VyYWN5fSB8IikpCgoKICAgIGRlZiBtYWluKHNlbGYsIGVwb2NoLCB0cmFpbl9sb2FkZXIsIHRlc3RfbG9hZGVyKToKICAgICAgICB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaCA9IFtdCiAgICAgICAgdGVzdF9tZXRyaWNzX3Blcl9lcG9jaCA9IFtdCgogICAgICAgIGZvciBlcG9jaF9pZCBpbiByYW5nZSgxLCBlcG9jaCsxKToKICAgICAgICAgICAgc2VsZi50cmFpbihzZWxmLm1vZGVsX2luc3RhbmNlLCBzZWxmLmNyaXRlcmlvbiwKICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGltaXplciwgdHJhaW5fbG9hZGVyKQogICAgICAgICAgICB0cmFpbl9tZXRyaWNzID0gc2VsZi50ZXN0KHNlbGYubW9kZWxfaW5zdGFuY2UsIHRyYWluX2xvYWRlcikKICAgICAgICAgICAgdGVzdF9tZXRyaWNzID0gc2VsZi50ZXN0KHNlbGYubW9kZWxfaW5zdGFuY2UsIHRlc3RfbG9hZGVyKQogICAgICAgICAgICBwcmludCgoZidFcG9jaDoge2Vwb2NoX2lkOiAwM2R9LCBUcmFpbjoge3NlbGYuZm10KHRyYWluX21ldHJpY3MpfSwnCiAgICAgICAgICAgICAgICAgICBmJyBUZXN0OiB7c2VsZi5mbXQodGVzdF9tZXRyaWNzKX0nKSkKICAgICAgICAgICAgdHJhaW5fbWV0cmljc19wZXJfZXBvY2guYXBwZW5kKHRyYWluX21ldHJpY3MpCiAgICAgICAgICAgIHRlc3RfbWV0cmljc19wZXJfZXBvY2guYXBwZW5kKHRlc3RfbWV0cmljcykKCiAgICAgICAgc2VsZi5kcmF3X21ldHJpY3ModHJhaW5fbWV0cmljc19wZXJfZXBvY2gsIHRlc3RfbWV0cmljc19wZXJfZXBvY2gpCgogICAgICAgIHNlbGYucHJpbnRfbWV0cmljX3N1bW1hcnkodHJhaW5fbWV0cmljc19wZXJfZXBvY2gsIHRlc3RfbWV0cmljc19wZXJfZXBvY2gpCgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0DwAAAAAAAHQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					546,
					1,
					"left_delete",
					null,
					"AQAAABUNAAAAAAAAFQ0AAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWDQAAAAAAABYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BQAAABUNAAAAAAAAFg0AAAAAAAAAAAAAFg0AAAAAAAAaDQAAAAAAAAAAAAAWDQAAAAAAABYNAAAAAAAABAAAACAgICAWDQAAAAAAAB4NAAAAAAAAAAAAAB4NAAAAAAAAIg0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVDQAAAAAAABUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					551,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 5089,
						"text": "from matplotlib import pyplot as plt\nimport logging\nimport numpy as np\nimport torch\n\n\nclass TrainEval(object):\n    def __init__(self, model_instance, device=None):\n        self.optimizer = torch.optim.Adam(model_instance.parameters(), lr=0.01)\n        self.criterion = torch.nn.CrossEntropyLoss()\n        self.model_instance = model_instance\n        self.device = device or torch.device('cpu')\n\n    def run_model(self, data, model):\n        return model(data.x, data.edge_index, data.batch)\n\n    def test(self, model, loader):\n        model.eval()\n        # print('[before test] lin sum^2:', torch.pow(model.lin.weight, 2).sum())\n\n        tp = 0\n        fn = 0\n        fp = 0\n        first_batch = True\n        # Iterate in batches over the training/test dataset.\n        for data in loader:\n            data = data.to(self.device)\n            out = self.run_model(data, model)\n            # print('out:', out)\n            pred = out.argmax(dim=1)  # Use the class with highest probability.\n            if first_batch:\n                logging.debug(f'first batch out[:5]: {out[:5]}')\n                first_batch = False\n            tp += int(((pred == 1)*(data.y == 1)).sum())\n            fn += int(((pred == 0)*(data.y == 1)).sum())\n            fp += int(((pred == 1)*(data.y == 0)).sum())\n\n        total = len(loader.dataset)\n        accuracy = (total - fp - fn) / total\n        precision = tp / (tp + fp + 1e-9)\n        recall = tp / (tp + fn + 1e-9)\n        f1 = 2*recall*precision / (recall + precision + 1e-9)\n        # print(f'total={total}, tp={tp}, fp={fp}, fn={fn}')\n        return accuracy, precision, recall, total, f1\n\n    SUPPORTED_METRIC_NAMES = ['accuracy', 'precision', 'recall', 'size', 'f1']\n\n    def fmt(self, metric_tuple):\n        output = []\n        for metric_idx, metric_name in enumerate(self.SUPPORTED_METRIC_NAMES):\n            metric_fmt = f\"{metric_name}={metric_tuple[metric_idx]:.4f}\"\n            output.append(metric_fmt)\n\n        return \", \".join(output)\n\n    def train(self, model, criterion, optimizer, train_loader):\n        model.train()\n\n        # logging.debug(f'[before training] lin sum^2: '\n        #               f'{torch.pow(model.lin.weight, 2).sum()}')\n\n        for data in train_loader:  # Iterate in batches over the training ds\n            data = data.to(self.device)\n            out = self.run_model(data, model)\n            # print('out:', out)\n            loss = criterion(out, data.y)  # Compute the loss.\n            loss.backward()  # Derive gradients.\n            optimizer.step()  # Update parameters based on gradients.\n            optimizer.zero_grad()  # Clear gradients.\n\n        # logging.debug(f'[after training] lin sum^2: '\n        #               f'{torch.pow(model.lin.weight, 2).sum()}')\n\n    def draw_metrics(self, train_metrics_per_epoch, test_metrics_per_epoch):\n        plt.figure(figsize=(10, 10))\n        for metric_idx, metric_name in enumerate(self.SUPPORTED_METRIC_NAMES):\n            plt.subplot(3, 2, metric_idx + 1)\n            plt.plot([t[metric_idx] for t in train_metrics_per_epoch],\n                     label='train')\n            plt.plot([t[metric_idx] for t in test_metrics_per_epoch],\n                     label='test')\n            plt.legend()\n            plt.title(metric_name)\n        plt.show()\n\n    def print_metric_summary(self, train_metrics_per_epoch,\n                             test_metrics_per_epoch):\n        test_f1 = test_metrics_per_epoch[-1][self.SUPPORTED_METRIC_NAMES.index(\n            'f1')]\n        test_f1_last10 = np.mean([item[self.SUPPORTED_METRIC_NAMES.index('f1')]\n                                  for item in test_metrics_per_epoch[-10:]])\n        test_accuracy = test_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('accuracy')]\n        train_f1 = train_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('f1')]\n        train_accuracy = train_metrics_per_epoch[-1][\n            self.SUPPORTED_METRIC_NAMES.index('accuracy')]\n\n        print((\"| Test F1 | Test F1 10 | Test Accuracy | Train F1 \"\n               \"| Train Accuracy | \"))\n        print(\"|---|---|---|---|---|\")\n        print((f\"| {test_f1} | {test_f1_last10} | {test_accuracy} | {train_f1}\"\n               f\" | {train_accuracy} |\"))\n\n    def main(self, epoch, train_loader, test_loader):\n        train_metrics_per_epoch = []\n        test_metrics_per_epoch = []\n\n        for epoch_id in range(1, epoch+1):\n            self.train(self.model_instance, self.criterion,\n                       self.optimizer, train_loader)\n            train_metrics = self.test(self.model_instance, train_loader)\n            test_metrics = self.test(self.model_instance, test_loader)\n            print((f'Epoch: {epoch_id: 03d}, Train: {self.fmt(train_metrics)},'\n                   f' Test: {self.fmt(test_metrics)}'))\n            train_metrics_per_epoch.append(train_metrics)\n            test_metrics_per_epoch.append(test_metrics)\n\n        self.draw_metrics(train_metrics_per_epoch, test_metrics_per_epoch)\n\n        self.print_metric_summary(\n            train_metrics_per_epoch, test_metrics_per_epoch)\n"
					},
					"AQAAAAAAAAAAAAAA8hMAAAAAAADhEwAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmltcG9ydCBsb2dnaW5nCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgdG9yY2gKCgpjbGFzcyBUcmFpbkV2YWwob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtb2RlbF9pbnN0YW5jZSwgZGV2aWNlPU5vbmUpOgogICAgICAgIHNlbGYub3B0aW1pemVyID0gdG9yY2gub3B0aW0uQWRhbShtb2RlbF9pbnN0YW5jZS5wYXJhbWV0ZXJzKCksIGxyPTAuMDEpCiAgICAgICAgc2VsZi5jcml0ZXJpb24gPSB0b3JjaC5ubi5Dcm9zc0VudHJvcHlMb3NzKCkKICAgICAgICBzZWxmLm1vZGVsX2luc3RhbmNlID0gbW9kZWxfaW5zdGFuY2UKICAgICAgICBzZWxmLmRldmljZSA9IGRldmljZSBvciB0b3JjaC5kZXZpY2UoJ2NwdScpCgogICAgZGVmIHJ1bl9tb2RlbChzZWxmLCBkYXRhLCBtb2RlbCk6CiAgICAgICAgcmV0dXJuIG1vZGVsKGRhdGEueCwgZGF0YS5lZGdlX2luZGV4LCBkYXRhLmJhdGNoKQoKICAgIGRlZiB0ZXN0KHNlbGYsIG1vZGVsLCBsb2FkZXIpOgogICAgICAgIG1vZGVsLmV2YWwoKQogICAgICAgICMgcHJpbnQoJ1tiZWZvcmUgdGVzdF0gbGluIHN1bV4yOicsIHRvcmNoLnBvdyhtb2RlbC5saW4ud2VpZ2h0LCAyKS5zdW0oKSkKCiAgICAgICAgdHAgPSAwCiAgICAgICAgZm4gPSAwCiAgICAgICAgZnAgPSAwCiAgICAgICAgZmlyc3RfYmF0Y2ggPSBUcnVlCiAgICAgICAgIyBJdGVyYXRlIGluIGJhdGNoZXMgb3ZlciB0aGUgdHJhaW5pbmcvdGVzdCBkYXRhc2V0LgogICAgICAgIGZvciBkYXRhIGluIGxvYWRlcjoKICAgICAgICAgICAgZGF0YSA9IGRhdGEudG8oc2VsZi5kZXZpY2UpCiAgICAgICAgICAgIG91dCA9IHNlbGYucnVuX21vZGVsKGRhdGEsIG1vZGVsKQogICAgICAgICAgICAjIHByaW50KCdvdXQ6Jywgb3V0KQogICAgICAgICAgICBwcmVkID0gb3V0LmFyZ21heChkaW09MSkgICMgVXNlIHRoZSBjbGFzcyB3aXRoIGhpZ2hlc3QgcHJvYmFiaWxpdHkuCiAgICAgICAgICAgIGlmIGZpcnN0X2JhdGNoOgogICAgICAgICAgICAgICAgbG9nZ2luZy5kZWJ1ZyhmJ2ZpcnN0IGJhdGNoIG91dFs6NV06IHtvdXRbOjVdfScpCiAgICAgICAgICAgICAgICBmaXJzdF9iYXRjaCA9IEZhbHNlCiAgICAgICAgICAgIHRwICs9IGludCgoKHByZWQgPT0gMSkqKGRhdGEueSA9PSAxKSkuc3VtKCkpCiAgICAgICAgICAgIGZuICs9IGludCgoKHByZWQgPT0gMCkqKGRhdGEueSA9PSAxKSkuc3VtKCkpCiAgICAgICAgICAgIGZwICs9IGludCgoKHByZWQgPT0gMSkqKGRhdGEueSA9PSAwKSkuc3VtKCkpCgogICAgICAgIHRvdGFsID0gbGVuKGxvYWRlci5kYXRhc2V0KQogICAgICAgIGFjY3VyYWN5ID0gKHRvdGFsIC0gZnAgLSBmbikgLyB0b3RhbAogICAgICAgIHByZWNpc2lvbiA9IHRwIC8gKHRwICsgZnAgKyAxZS05KQogICAgICAgIHJlY2FsbCA9IHRwIC8gKHRwICsgZm4gKyAxZS05KQogICAgICAgIGYxID0gMipyZWNhbGwqcHJlY2lzaW9uIC8gKHJlY2FsbCArIHByZWNpc2lvbiArIDFlLTkpCiAgICAgICAgIyBwcmludChmJ3RvdGFsPXt0b3RhbH0sIHRwPXt0cH0sIGZwPXtmcH0sIGZuPXtmbn0nKQogICAgICAgIHJldHVybiBhY2N1cmFjeSwgcHJlY2lzaW9uLCByZWNhbGwsIHRvdGFsLCBmMQoKICAgIFNVUFBPUlRFRF9NRVRSSUNfTkFNRVMgPSBbJ2FjY3VyYWN5JywgJ3ByZWNpc2lvbicsICdyZWNhbGwnLCAnc2l6ZScsICdmMSddCgogICAgZGVmIGZtdChzZWxmLCBtZXRyaWNfdHVwbGUpOgogICAgICAgIG91dHB1dCA9IFtdCiAgICAgICAgZm9yIG1ldHJpY19pZHgsIG1ldHJpY19uYW1lIGluIGVudW1lcmF0ZShzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMpOgogICAgICAgICAgICBtZXRyaWNfZm10ID0gZiJ7bWV0cmljX25hbWV9PXttZXRyaWNfdHVwbGVbbWV0cmljX2lkeF06LjRmfSIKICAgICAgICAgICAgb3V0cHV0LmFwcGVuZChtZXRyaWNfZm10KQoKICAgICAgICByZXR1cm4gIiwgIi5qb2luKG91dHB1dCkKCiAgICBkZWYgdHJhaW4oc2VsZiwgbW9kZWwsIGNyaXRlcmlvbiwgb3B0aW1pemVyLCB0cmFpbl9sb2FkZXIpOgogICAgICAgIG1vZGVsLnRyYWluKCkKCiAgICAgICAgIyBsb2dnaW5nLmRlYnVnKGYnW2JlZm9yZSB0cmFpbmluZ10gbGluIHN1bV4yOiAnCiAgICAgICAgIyAgICAgICAgICAgICAgIGYne3RvcmNoLnBvdyhtb2RlbC5saW4ud2VpZ2h0LCAyKS5zdW0oKX0nKQoKICAgICAgICBmb3IgZGF0YSBpbiB0cmFpbl9sb2FkZXI6ICAjIEl0ZXJhdGUgaW4gYmF0Y2hlcyBvdmVyIHRoZSB0cmFpbmluZyBkcwogICAgICAgICAgICBkYXRhID0gZGF0YS50byhzZWxmLmRldmljZSkKICAgICAgICAgICAgb3V0ID0gc2VsZi5ydW5fbW9kZWwoZGF0YSwgbW9kZWwpCiAgICAgICAgICAgICMgcHJpbnQoJ291dDonLCBvdXQpCiAgICAgICAgICAgIGxvc3MgPSBjcml0ZXJpb24ob3V0LCBkYXRhLnkpICAjIENvbXB1dGUgdGhlIGxvc3MuCiAgICAgICAgICAgIGxvc3MuYmFja3dhcmQoKSAgIyBEZXJpdmUgZ3JhZGllbnRzLgogICAgICAgICAgICBvcHRpbWl6ZXIuc3RlcCgpICAjIFVwZGF0ZSBwYXJhbWV0ZXJzIGJhc2VkIG9uIGdyYWRpZW50cy4KICAgICAgICAgICAgb3B0aW1pemVyLnplcm9fZ3JhZCgpICAjIENsZWFyIGdyYWRpZW50cy4KCiAgICAgICAgIyBsb2dnaW5nLmRlYnVnKGYnW2FmdGVyIHRyYWluaW5nXSBsaW4gc3VtXjI6ICcKICAgICAgICAjICAgICAgICAgICAgICAgZid7dG9yY2gucG93KG1vZGVsLmxpbi53ZWlnaHQsIDIpLnN1bSgpfScpCgogICAgZGVmIGRyYXdfbWV0cmljcyhzZWxmLCB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaCwgdGVzdF9tZXRyaWNzX3Blcl9lcG9jaCk6CiAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSgxMCwgMTApKQogICAgICAgIGZvciBtZXRyaWNfaWR4LCBtZXRyaWNfbmFtZSBpbiBlbnVtZXJhdGUoc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTKToKICAgICAgICAgICAgcGx0LnN1YnBsb3QoMywgMiwgbWV0cmljX2lkeCArIDEpCiAgICAgICAgICAgIHBsdC5wbG90KFt0W21ldHJpY19pZHhdIGZvciB0IGluIHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoXSwKICAgICAgICAgICAgICAgICAgICAgbGFiZWw9J3RyYWluJykKICAgICAgICAgICAgcGx0LnBsb3QoW3RbbWV0cmljX2lkeF0gZm9yIHQgaW4gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaF0sCiAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSd0ZXN0JykKICAgICAgICAgICAgcGx0LmxlZ2VuZCgpCiAgICAgICAgICAgIHBsdC50aXRsZShtZXRyaWNfbmFtZSkKICAgICAgICBwbHQuc2hvdygpCgogICAgZGVmIHByaW50X21ldHJpY19zdW1tYXJ5KHNlbGYsIHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoLAogICAgICAgICAgICB0ZXN0X21ldHJpY3NfcGVyX2Vwb2NoKToKICAgICAgICB0ZXN0X2YxID0gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMV1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KAogICAgICAgICAgICAnZjEnKV0KICAgICAgICB0ZXN0X2YxX2xhc3QxMCA9IG5wLm1lYW4oW2l0ZW1bc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdmMScpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gdGVzdF9tZXRyaWNzX3Blcl9lcG9jaFstMTA6XV0pCiAgICAgICAgdGVzdF9hY2N1cmFjeSA9IHRlc3RfbWV0cmljc19wZXJfZXBvY2hbLTFdWwogICAgICAgICAgICBzZWxmLlNVUFBPUlRFRF9NRVRSSUNfTkFNRVMuaW5kZXgoJ2FjY3VyYWN5JyldCiAgICAgICAgdHJhaW5fZjEgPSB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaFstMV1bCiAgICAgICAgICAgIHNlbGYuU1VQUE9SVEVEX01FVFJJQ19OQU1FUy5pbmRleCgnZjEnKV0KICAgICAgICB0cmFpbl9hY2N1cmFjeSA9IHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoWy0xXVsKICAgICAgICAgICAgc2VsZi5TVVBQT1JURURfTUVUUklDX05BTUVTLmluZGV4KCdhY2N1cmFjeScpXQoKICAgICAgICBwcmludCgoInwgVGVzdCBGMSB8IFRlc3QgRjEgMTAgfCBUZXN0IEFjY3VyYWN5IHwgVHJhaW4gRjEgIgogICAgICAgICAgICAgICAifCBUcmFpbiBBY2N1cmFjeSB8ICIpKQogICAgICAgIHByaW50KCJ8LS0tfC0tLXwtLS18LS0tfC0tLXwiKQogICAgICAgIHByaW50KChmInwge3Rlc3RfZjF9IHwge3Rlc3RfZjFfbGFzdDEwfSB8IHt0ZXN0X2FjY3VyYWN5fSB8IHt0cmFpbl9mMX0iCiAgICAgICAgICAgICAgIGYiIHwge3RyYWluX2FjY3VyYWN5fSB8IikpCgogICAgZGVmIG1haW4oc2VsZiwgZXBvY2gsIHRyYWluX2xvYWRlciwgdGVzdF9sb2FkZXIpOgogICAgICAgIHRyYWluX21ldHJpY3NfcGVyX2Vwb2NoID0gW10KICAgICAgICB0ZXN0X21ldHJpY3NfcGVyX2Vwb2NoID0gW10KCiAgICAgICAgZm9yIGVwb2NoX2lkIGluIHJhbmdlKDEsIGVwb2NoKzEpOgogICAgICAgICAgICBzZWxmLnRyYWluKHNlbGYubW9kZWxfaW5zdGFuY2UsIHNlbGYuY3JpdGVyaW9uLAogICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3B0aW1pemVyLCB0cmFpbl9sb2FkZXIpCiAgICAgICAgICAgIHRyYWluX21ldHJpY3MgPSBzZWxmLnRlc3Qoc2VsZi5tb2RlbF9pbnN0YW5jZSwgdHJhaW5fbG9hZGVyKQogICAgICAgICAgICB0ZXN0X21ldHJpY3MgPSBzZWxmLnRlc3Qoc2VsZi5tb2RlbF9pbnN0YW5jZSwgdGVzdF9sb2FkZXIpCiAgICAgICAgICAgIHByaW50KChmJ0Vwb2NoOiB7ZXBvY2hfaWQ6IDAzZH0sIFRyYWluOiB7c2VsZi5mbXQodHJhaW5fbWV0cmljcyl9LCcKICAgICAgICAgICAgICAgICAgIGYnIFRlc3Q6IHtzZWxmLmZtdCh0ZXN0X21ldHJpY3MpfScpKQogICAgICAgICAgICB0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaC5hcHBlbmQodHJhaW5fbWV0cmljcykKICAgICAgICAgICAgdGVzdF9tZXRyaWNzX3Blcl9lcG9jaC5hcHBlbmQodGVzdF9tZXRyaWNzKQoKICAgICAgICBzZWxmLmRyYXdfbWV0cmljcyh0cmFpbl9tZXRyaWNzX3Blcl9lcG9jaCwgdGVzdF9tZXRyaWNzX3Blcl9lcG9jaCkKCiAgICAgICAgc2VsZi5wcmludF9tZXRyaWNfc3VtbWFyeSgKICAgICAgICAgICAgdHJhaW5fbWV0cmljc19wZXJfZXBvY2gsIHRlc3RfbWV0cmljc19wZXJfZXBvY2gpCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiDQAAAAAAACINAAAAAAAAAAAAAAAA8L8"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJAPAAAAAAAAkQ8AAAAAAAAAAAAAkQ8AAAAAAACdDwAAAAAAAAAAAACdDwAAAAAAAJ4PAAAAAAAAAAAAAJ4PAAAAAAAAqg8AAAAAAAAAAAAAkQ8AAAAAAACRDwAAAAAAAAwAAAAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQDwAAAAAAAJAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					567,
					1,
					"left_delete",
					null,
					"AQAAAJoPAAAAAAAAmg8AAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeDwAAAAAAAJ4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					571,
					1,
					"cut",
					null,
					"AQAAAJEPAAAAAAAAkQ8AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRDwAAAAAAAJEPAAAAAAAAAAAAAAAAUkA"
				],
				[
					574,
					1,
					"left_delete",
					null,
					"AQAAAJAPAAAAAAAAkA8AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRDwAAAAAAAJEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					576,
					1,
					"left_delete",
					null,
					"AQAAAJAPAAAAAAAAkA8AAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRDwAAAAAAAJEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					579,
					7,
					"left_delete",
					null,
					"BwAAAJYPAAAAAAAAlg8AAAAAAAABAAAAIJUPAAAAAAAAlQ8AAAAAAAABAAAAIJQPAAAAAAAAlA8AAAAAAAABAAAAIJMPAAAAAAAAkw8AAAAAAAABAAAAIJIPAAAAAAAAkg8AAAAAAAABAAAAIJEPAAAAAAAAkQ8AAAAAAAABAAAAIJAPAAAAAAAAkA8AAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXDwAAAAAAAJcPAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/visualization/visualization.py",
			"settings":
			{
				"buffer_size": 1313,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " edge_mask"
					},
					"CgAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					4,
					"left_delete",
					null,
					"BAAAAKsAAAAAAAAAqwAAAAAAAAABAAAAa6oAAAAAAAAAqgAAAAAAAAABAAAAc6kAAAAAAAAAqQAAAAAAAAABAAAAYagAAAAAAAAAqAAAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "weigt"
					},
					"BQAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAKwAAAAAAAAArAAAAAAAAAABAAAAdKsAAAAAAAAAqwAAAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAAAAAAAAAK0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "ght"
					},
					"AwAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrAAAAAAAAAKsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALAAAAAAAAAAsQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAALAAAAAAAAAAsAAAAAAAAAABAAAAIK8AAAAAAAAArwAAAAAAAAABAAAAOq4AAAAAAAAArgAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAAAAAAAAALEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAK4AAAAAAAAArwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " Optional"
					},
					"CQAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALIAAAAAAAAAAAAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALUAAAAAAAAAAAAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALgAAAAAAAAAugAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AAAAAAAAALgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "Dict"
					},
					"BAAAALkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAC7AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAvQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AAAAAAAAALkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAL0AAAAAAAAAvwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AAAAAAAAAL0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "Tuple"
					},
					"BQAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AAAAAAAAAL4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMMAAAAAAAAAxQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAAAAAAAAAMMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "int,"
					},
					"BAAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAMcAAAAAAAAAyAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " int"
					},
					"BAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAADKAAAAAAAAAMsAAAAAAAAAAAAAAMsAAAAAAAAAzAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM0AAAAAAAAAzgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4AAAAAAAAAzwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAAAAAAAAAM4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "float"
					},
					"BQAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAAM8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"sort_lines",
					{
						"case_sensitive": false
					},
					"AQAAAAAAAAAAAAAAhgAAAAAAAACGAAAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YQpmcm9tIG1hdHBsb3RsaWIgaW1wb3J0IHB5cGxvdCBhcyBwbHQKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaAppbXBvcnQgbmV0d29ya3ggYXMgbng",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\nfrom"
					},
					"BQAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAAAAAAAAAHAAAAAAAAAA////////738"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " typing"
					},
					"BwAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AAAAAAAAAHUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " Opt"
					},
					"BAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAAAAAAAAAIMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert_completion",
					{
						"completion": "Optional",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Optional"
					},
					"AgAAAIQAAAAAAAAAhAAAAAAAAAADAAAAT3B0hAAAAAAAAACMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAAAAAAAAAIcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " Dict,"
					},
					"BgAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAI0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " Tuple"
					},
					"BgAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8AAAAAAAAAAAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"",
					null,
					"AQAAAP8AAAAAAAAAAQEAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					2,
					"left_delete",
					null,
					"AgAAAAABAAAAAAAAAAEAAAAAAAABAAAAIP8AAAAAAAAA/wAAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAABAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " None"
					},
					"BQAAAAEBAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAAQBAAAAAAAAAAAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAMwAAAAAAAAAzQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMAAAAAAAAAMwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAAMwAAAAAAAAAzAAAAAAAAAABAAAAXA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAMwAAAAAAAAAzQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMAAAAAAAAAMwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					3,
					"left_delete",
					null,
					"AwAAAMwAAAAAAAAAzAAAAAAAAAABAAAAXMsAAAAAAAAAywAAAAAAAAABAAAAIMoAAAAAAAAAygAAAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMoAAAAAAAAAywAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMsAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAAAAAAAAAMsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALIAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "Weight"
					},
					"BgAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALUAAAAAAAAAAAAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					6,
					"left_delete",
					null,
					"BgAAALcAAAAAAAAAtwAAAAAAAAABAAAAdLYAAAAAAAAAtgAAAAAAAAABAAAAaLUAAAAAAAAAtQAAAAAAAAABAAAAZ7QAAAAAAAAAtAAAAAAAAAABAAAAabMAAAAAAAAAswAAAAAAAAABAAAAZbIAAAAAAAAAsgAAAAAAAAABAAAAVw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AAAAAAAAALgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "EdgeWeight"
					},
					"CgAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALUAAAAAAAAAAAAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALwAAAAAAAAAvQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AAAAAAAAALwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AAAAAAAAAL0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " Dict"
					},
					"BQAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AAAAAAAAAL8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"cut",
					null,
					"AQAAAPsAAAAAAAAA+wAAAAAAAAAcAAAARGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7AAAAAAAAABcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAMAAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADcAAAAAAAAAAQAAABEaWN0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"paste",
					null,
					"AQAAABMBAAAAAAAAHgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAQAAAAAAABMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 550,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data,\n              edge_weight: Optional[EdgeWeights] = None):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = None\n\n    nx.draw_networkx(nx_temp_graph, pos)\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAAMAIAAAAAAAAmAgAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwKICAgIGVkZ2Vfd2VpZ2h0OiBPcHRpb25hbFtFZGdlV2VpZ2h0c10gPSBOb25lKToKICAgIG54X3RlbXBfZ3JhcGggPSBweWdyYXBoX3RvX254X2dyYXBoKGRhdGEpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IE5vbmUKCiAgICBueC5kcmF3X25ldHdvcmt4KG54X3RlbXBfZ3JhcGgsIHBvcykKICAgIHBsdC50aXRsZShmImlzX3BsYW5hcj17Ym9vbChkYXRhLnlbMF0pfSIpCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAQAAAAAAACgBAAAAAAAA////////738"
				],
				[
					133,
					6,
					"left_delete",
					null,
					"BgAAAAUBAAAAAAAABQEAAAAAAAACAAAAICABAQAAAAAAAAEBAAAAAAAABAAAACAgICD9AAAAAAAAAP0AAAAAAAAABAAAACAgICD5AAAAAAAAAPkAAAAAAAAABAAAACAgICD4AAAAAAAAAPgAAAAAAAAAAQAAAAr3AAAAAAAAAPcAAAAAAAAAAQAAACw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAACAX0A"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPcAAAAAAAAA+AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AAAAAAAAAPcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMoBAAAAAAAAywEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAQAAAAAAAMoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMoBAAAAAAAAywEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAQAAAAAAAMoBAAAAAAAAAAAAAAAAAAA"
				],
				[
					168,
					1,
					"paste",
					null,
					"AQAAAMsBAAAAAAAAigIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAQAAAAAAAMsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMsBAAAAAAAAzwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAQAAAAAAAMsBAAAAAAAAAAAAAAAAAAA"
				],
				[
					176,
					4,
					"left_delete",
					null,
					"BAAAANoBAAAAAAAA2gEAAAAAAAABAAAAa9kBAAAAAAAA2QEAAAAAAAABAAAAc9gBAAAAAAAA2AEAAAAAAAABAAAAYdcBAAAAAAAA1wEAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbAQAAAAAAANsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "weifght"
					},
					"BwAAANcBAAAAAAAA2AEAAAAAAAAAAAAA2AEAAAAAAADZAQAAAAAAAAAAAADZAQAAAAAAANoBAAAAAAAAAAAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADcAQAAAAAAAAAAAADcAQAAAAAAAN0BAAAAAAAAAAAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAQAAAAAAANcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"left_delete",
					null,
					"AQAAANoBAAAAAAAA2gEAAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbAQAAAAAAANsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "weight"
					},
					"BwAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA7AgAAAAAAAAkAAABlZGdlX21hc2s7AgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAD8CAAAAAAAAQAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AgAAAAAAAEMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "edge_"
					},
					"BQAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AgAAAAAAADoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": ".to_"
					},
					"BAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAQAAAAAAAFIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					4,
					"left_delete",
					null,
					"BAAAAFUBAAAAAAAAVQEAAAAAAAABAAAAX1QBAAAAAAAAVAEAAAAAAAABAAAAb1MBAAAAAAAAUwEAAAAAAAABAAAAdFIBAAAAAAAAUgEAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAQAAAAAAAFYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": ".to_"
					},
					"BAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAQAAAAAAAFIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					4,
					"left_delete",
					null,
					"BAAAAFUBAAAAAAAAVQEAAAAAAAABAAAAX1QBAAAAAAAAVAEAAAAAAAABAAAAb1MBAAAAAAAAUwEAAAAAAAABAAAAdFIBAAAAAAAAUgEAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAQAAAAAAAFYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACIBAAAAAAAAIwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAQAAAAAAACIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "\n\t\t\t"
					},
					"BQAAACMBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAACwBAAAAAAAAAAAAACwBAAAAAAAAMAEAAAAAAAAAAAAAMAEAAAAAAAA0AQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					265,
					1,
					"left_delete",
					null,
					"AQAAADABAAAAAAAAMAEAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0AQAAAAAAADQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "undurect"
					},
					"CAAAADABAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAyAQAAAAAAAAAAAAAyAQAAAAAAADMBAAAAAAAAAAAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAQAAAAAAADABAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					5,
					"left_delete",
					null,
					"BQAAADcBAAAAAAAANwEAAAAAAAABAAAAdDYBAAAAAAAANgEAAAAAAAABAAAAYzUBAAAAAAAANQEAAAAAAAABAAAAZTQBAAAAAAAANAEAAAAAAAABAAAAcjMBAAAAAAAAMwEAAAAAAAABAAAAdQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4AQAAAAAAADgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "irected="
					},
					"CAAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOgEAAAAAAAAAAAAAOgEAAAAAAAA7AQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "True"
					},
					"BAAAADsBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD4BAAAAAAAAAAAAAD4BAAAAAAAAPwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AQAAAAAAADsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAADABAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAyAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAQAAAAAAADABAAAAAAAAAAAAAAAA8L8"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAADwBAAAAAAAAPQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " bool"
					},
					"BQAAAD0BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAEABAAAAAAAAAAAAAEABAAAAAAAAQQEAAAAAAAAAAAAAQQEAAAAAAABCAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9AQAAAAAAAD0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIBAAAAAAAAQwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCAQAAAAAAAEIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					1,
					"left_delete",
					null,
					"AQAAAEIBAAAAAAAAQgEAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDAQAAAAAAAEMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 784,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data, edge_weight: Optional[EdgeWeights] = None,\n              undirected: bool = True):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = None\n\n    if edge_weight is None:\n        edge_color = 'black'\n        widths = None\n    else:\n        edge_color = [edge_weight[(u, v)] for u, v in g.edges()]\n        widths = [x * 10 for x in edge_color]\n\n    nx.draw_networkx(nx_temp_graph, pos)\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAAEgMAAAAAAAAQAwAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwgZWRnZV93ZWlnaHQ6IE9wdGlvbmFsW0VkZ2VXZWlnaHRzXSA9IE5vbmUsCiAgICAgICAgICAgICAgdW5kaXJlY3RlZDogYm9vbD1UcnVlKToKICAgIG54X3RlbXBfZ3JhcGggPSBweWdyYXBoX3RvX254X2dyYXBoKGRhdGEpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IE5vbmUKCiAgICBpZiBlZGdlX3dlaWdodCBpcyBOb25lOgogICAgICAgIGVkZ2VfY29sb3IgPSAnYmxhY2snCiAgICAgICAgd2lkdGhzID0gTm9uZQogICAgZWxzZToKICAgICAgICBlZGdlX2NvbG9yID0gW2VkZ2Vfd2VpZ2h0Wyh1LCB2KV0gZm9yIHUsIHYgaW4gZy5lZGdlcygpXQogICAgICAgIHdpZHRocyA9IFt4ICogMTAgZm9yIHggaW4gZWRnZV9jb2xvcl0KCiAgICBueC5kcmF3X25ldHdvcmt4KG54X3RlbXBfZ3JhcGgsIHBvcykKICAgIHBsdC50aXRsZShmImlzX3BsYW5hcj17Ym9vbChkYXRhLnlbMF0pfSIpCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAQAAAAAAADIBAAAAAAAAAAAAAACAX0A"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAHkBAAAAAAAAegEAAAAAAAAAAAAAegEAAAAAAAB+AQAAAAAAAAAAAAB+AQAAAAAAAH8BAAAAAAAAAAAAAH8BAAAAAAAAgAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5AQAAAAAAAHkBAAAAAAAA////////738"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": " und"
					},
					"BAAAAIABAAAAAAAAgQEAAAAAAAAAAAAAgQEAAAAAAACCAQAAAAAAAAAAAACCAQAAAAAAAIMBAAAAAAAAAAAAAIMBAAAAAAAAhAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAQAAAAAAAIABAAAAAAAAAAAAAAAA8L8"
				],
				[
					300,
					1,
					"insert_completion",
					{
						"completion": "undirected",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "undirected"
					},
					"AgAAAIEBAAAAAAAAgQEAAAAAAAADAAAAdW5kgQEAAAAAAACLAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAQAAAAAAAIQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIsBAAAAAAAAjAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAQAAAAAAAIsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJUBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAQAAAAAAAIwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					1,
					"paste",
					null,
					"AQAAAJUBAAAAAAAAogEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVAQAAAAAAAJUBAAAAAAAAAAAAAAAgY0A"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACkAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAQAAAAAAAKIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKQBAAAAAAAApQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAQAAAAAAAKQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"paste",
					null,
					"AQAAAKUBAAAAAAAAsgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAQAAAAAAAKUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": ".to_un"
					},
					"BgAAALIBAAAAAAAAswEAAAAAAAAAAAAAswEAAAAAAAC0AQAAAAAAAAAAAAC0AQAAAAAAALUBAAAAAAAAAAAAALUBAAAAAAAAtgEAAAAAAAAAAAAAtgEAAAAAAAC3AQAAAAAAAAAAAAC3AQAAAAAAALgBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAQAAAAAAALIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					313,
					1,
					"insert_completion",
					{
						"completion": "to_undirected",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "to_undirected"
					},
					"AgAAALMBAAAAAAAAswEAAAAAAAAFAAAAdG9fdW6zAQAAAAAAAMABAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AQAAAAAAALgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					314,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMABAAAAAAAAwgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAAQAAAAAAAMABAAAAAAAAAAAAAAAA8L8"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACsDAAAAAAAALAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArAwAAAAAAACsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwDAAAAAAAALQMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAwAAAAAAACwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "wif"
					},
					"AwAAAC0DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAADADAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAwAAAAAAAC0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"left_delete",
					null,
					"AQAAAC8DAAAAAAAALwMAAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAwAAAAAAADADAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"insert",
					{
						"characters": "dt"
					},
					"AgAAAC8DAAAAAAAAMAMAAAAAAAAAAAAAMAMAAAAAAAAxAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAwAAAAAAAC8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					327,
					1,
					"insert_completion",
					{
						"completion": "widths",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "widths"
					},
					"AgAAAC0DAAAAAAAALQMAAAAAAAAEAAAAd2lkdC0DAAAAAAAAMwMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxAwAAAAAAADEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "=wid"
					},
					"BAAAADMDAAAAAAAANAMAAAAAAAAAAAAANAMAAAAAAAA1AwAAAAAAAAAAAAA1AwAAAAAAADYDAAAAAAAAAAAAADYDAAAAAAAANwMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAwAAAAAAADMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					329,
					1,
					"insert_completion",
					{
						"completion": "widths",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "widths"
					},
					"AgAAADQDAAAAAAAANAMAAAAAAAADAAAAd2lkNAMAAAAAAAA6AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AwAAAAAAADcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADoDAAAAAAAAOwMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AwAAAAAAADoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "\n\t\t\t"
					},
					"BwAAADsDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAABAAwAAAAAAAAAAAAA8AwAAAAAAADwDAAAAAAAABAAAACAgICA8AwAAAAAAAEQDAAAAAAAAAAAAAEQDAAAAAAAASAMAAAAAAAAAAAAASAMAAAAAAABMAwAAAAAAAAAAAABMAwAAAAAAAFADAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AwAAAAAAADsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFADAAAAAAAAUQMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQAwAAAAAAAFADAAAAAAAAAAAAAAAA8L8"
				],
				[
					333,
					1,
					"paste",
					null,
					"AQAAAFEDAAAAAAAAZgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRAwAAAAAAAFEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					339,
					1,
					"left_delete",
					null,
					"AQAAACwDAAAAAAAALAMAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAwAAAAAAAC0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "\n\t\t\t"
					},
					"BwAAACwDAAAAAAAALQMAAAAAAAAAAAAALQMAAAAAAAAxAwAAAAAAAAAAAAAtAwAAAAAAAC0DAAAAAAAABAAAACAgICAtAwAAAAAAADUDAAAAAAAAAAAAADUDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAEEDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAwAAAAAAACwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 938,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data, edge_weight: Optional[EdgeWeights] = None,\n              undirected: bool = True):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n    if undirected:\n        nx_temp_graph = nx_temp_graph.to_undirected()\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = None\n\n    if edge_weight is None:\n        edge_color = 'black'\n        widths = None\n    else:\n        edge_color = [edge_weight[(u, v)] for u, v in g.edges()]\n        widths = [x * 10 for x in edge_color]\n\n    nx.draw_networkx(nx_temp_graph, pos,\n                     widths=widths,\n                     edge_color=edge_color)\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAAqwMAAAAAAACqAwAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwgZWRnZV93ZWlnaHQ6IE9wdGlvbmFsW0VkZ2VXZWlnaHRzXSA9IE5vbmUsCiAgICAgICAgICAgICAgdW5kaXJlY3RlZDogYm9vbCA9IFRydWUpOgogICAgbnhfdGVtcF9ncmFwaCA9IHB5Z3JhcGhfdG9fbnhfZ3JhcGgoZGF0YSkKICAgIGlmIHVuZGlyZWN0ZWQ6CiAgICAgICAgbnhfdGVtcF9ncmFwaCA9IG54X3RlbXBfZ3JhcGgudG9fdW5kaXJlY3RlZCgpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IE5vbmUKCiAgICBpZiBlZGdlX3dlaWdodCBpcyBOb25lOgogICAgICAgIGVkZ2VfY29sb3IgPSAnYmxhY2snCiAgICAgICAgd2lkdGhzID0gTm9uZQogICAgZWxzZToKICAgICAgICBlZGdlX2NvbG9yID0gW2VkZ2Vfd2VpZ2h0Wyh1LCB2KV0gZm9yIHUsIHYgaW4gZy5lZGdlcygpXQogICAgICAgIHdpZHRocyA9IFt4ICogMTAgZm9yIHggaW4gZWRnZV9jb2xvcl0KCiAgICBueC5kcmF3X25ldHdvcmt4KG54X3RlbXBfZ3JhcGgsIHBvcywKICAgICAgICAgICAgICAgICAgICB3aWR0aHM9d2lkdGhzLAogICAgICAgICAgICAgICAgICAgICBlZGdlX2NvbG9yPWVkZ2VfY29sb3IpCiAgICBwbHQudGl0bGUoZiJpc19wbGFuYXI9e2Jvb2woZGF0YS55WzBdKX0iKQo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBAwAAAAAAAEEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					378,
					1,
					"left_delete",
					null,
					"AQAAAMoCAAAAAAAAygIAAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAgAAAAAAAMsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"paste",
					null,
					"AQAAAMoCAAAAAAAA1wIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAgAAAAAAAMoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					424,
					1,
					"paste",
					null,
					"AgAAAE4DAAAAAAAAUwMAAAAAAAAAAAAAUwMAAAAAAABTAwAAAAAAAAYAAAB3aWR0aHM",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOAwAAAAAAAFQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CgAAAIcDAAAAAAAAiAMAAAAAAAAAAAAAiAMAAAAAAACdAwAAAAAAAAAAAACIAwAAAAAAAIgDAAAAAAAAFQAAACAgICAgICAgICAgICAgICAgICAgIIgDAAAAAAAAjAMAAAAAAAAAAAAAjAMAAAAAAACNAwAAAAAAAAAAAACNAwAAAAAAAJEDAAAAAAAAAAAAAIgDAAAAAAAAiAMAAAAAAAAEAAAAICAgII0DAAAAAAAAjgMAAAAAAAAAAAAAjgMAAAAAAACSAwAAAAAAAAAAAACJAwAAAAAAAIkDAAAAAAAABAAAACAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAwAAAAAAAIcDAAAAAAAA////////738"
				],
				[
					434,
					1,
					"paste",
					null,
					"AQAAAI4DAAAAAAAAggQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAwAAAAAAAI4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"BAAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACnBAAAAAAAAAAAAACDBAAAAAAAAIMEAAAAAAAAJAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIIMEAAAAAAAAiwQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBAAAAAAAAIIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AgAAAHEDAAAAAAAAcgMAAAAAAAAAAAAAhAQAAAAAAACEBAAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAwAAAAAAAHEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIcDAAAAAAAAiAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAwAAAAAAAIcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIgDAAAAAAAAiQMAAAAAAAAAAAAAiQMAAAAAAACeAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAwAAAAAAAIgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					444,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAABoEAAAAAAAAGgQAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAwAAAAAAAJ4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 1222,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data, edge_weight: Optional[EdgeWeights] = None,\n              undirected: bool = True):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n    if undirected:\n        nx_temp_graph = nx_temp_graph.to_undirected()\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = None\n\n    if edge_weight is None:\n        edge_color = 'black'\n        widths = None\n    else:\n        edge_color = [edge_weight[(u, v)] for u, v in nx_temp_graph.edges()]\n        widths = [x * 10 for x in edge_color]\n\n    nx.draw_networkx(nx_temp_graph, pos,\n                     width=widths,\n                     # edge_color=edge_color,\n                     )\n\n    if draw_edge_labels and edge_mask is not None:\n        edge_labels = {k: ('%.2f' % v) for k, v in edge_mask.items()}\n        nx.draw_networkx_edge_labels(g, pos, edge_labels=edge_labels,\n                                     font_color='red')\n\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAAxwQAAAAAAADGBAAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwgZWRnZV93ZWlnaHQ6IE9wdGlvbmFsW0VkZ2VXZWlnaHRzXSA9IE5vbmUsCiAgICAgICAgICAgICAgdW5kaXJlY3RlZDogYm9vbCA9IFRydWUpOgogICAgbnhfdGVtcF9ncmFwaCA9IHB5Z3JhcGhfdG9fbnhfZ3JhcGgoZGF0YSkKICAgIGlmIHVuZGlyZWN0ZWQ6CiAgICAgICAgbnhfdGVtcF9ncmFwaCA9IG54X3RlbXBfZ3JhcGgudG9fdW5kaXJlY3RlZCgpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IE5vbmUKCiAgICBpZiBlZGdlX3dlaWdodCBpcyBOb25lOgogICAgICAgIGVkZ2VfY29sb3IgPSAnYmxhY2snCiAgICAgICAgd2lkdGhzID0gTm9uZQogICAgZWxzZToKICAgICAgICBlZGdlX2NvbG9yID0gW2VkZ2Vfd2VpZ2h0Wyh1LCB2KV0gZm9yIHUsIHYgaW4gbnhfdGVtcF9ncmFwaC5lZGdlcygpXQogICAgICAgIHdpZHRocyA9IFt4ICogMTAgZm9yIHggaW4gZWRnZV9jb2xvcl0KCiAgICBueC5kcmF3X25ldHdvcmt4KG54X3RlbXBfZ3JhcGgsIHBvcywKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9d2lkdGhzLAogICAgICAgICAgICAgICAgICAgICAjZWRnZV9jb2xvcj1lZGdlX2NvbG9yLAogICAgICAgICAgICAgICAgICAgICApCgoKICAgIGlmIGRyYXdfZWRnZV9sYWJlbHMgYW5kIGVkZ2VfbWFzayBpcyBub3QgTm9uZToKICAgICAgICBlZGdlX2xhYmVscyA9IHtrOiAoJyUuMmYnICUgdikgZm9yIGssIHYgaW4gZWRnZV9tYXNrLml0ZW1zKCl9CiAgICAgICAgbnguZHJhd19uZXR3b3JreF9lZGdlX2xhYmVscyhnLCBwb3MsIGVkZ2VfbGFiZWxzPWVkZ2VfbGFiZWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250X2NvbG9yPSdyZWQnKQoKICAgIHBsdC50aXRsZShmImlzX3BsYW5hcj17Ym9vbChkYXRhLnlbMF0pfSIpCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAwAAAAAAAJ4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					459,
					1,
					"left_delete",
					null,
					"AQAAAKkDAAAAAAAAqQMAAAAAAAAVAAAAZHJhd19lZGdlX2xhYmVscyBhbmQg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AwAAAAAAAKkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": "me"
					},
					"AwAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB+BAAAAAAAAAMAAAByZWR+BAAAAAAAAH8EAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9BAAAAAAAAIAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					470,
					1,
					"left_delete",
					null,
					"AQAAAH4EAAAAAAAAfgQAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BAAAAAAAAH8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": "agenta"
					},
					"BgAAAH4EAAAAAAAAfwQAAAAAAAAAAAAAfwQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIEEAAAAAAAAAAAAAIEEAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACDBAAAAAAAAAAAAACDBAAAAAAAAIQEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BAAAAAAAAH4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					495,
					1,
					"paste",
					null,
					"AgAAAKkDAAAAAAAAtAMAAAAAAAAAAAAAtAMAAAAAAAC0AwAAAAAAAAkAAABlZGdlX21hc2s",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAwAAAAAAALIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					513,
					1,
					"paste",
					null,
					"AgAAAPUDAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAkAAABlZGdlX21hc2s",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1AwAAAAAAAP4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					531,
					1,
					"left_delete",
					null,
					"AQAAAC8EAAAAAAAALwQAAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwBAAAAAAAADAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "nx_"
					},
					"AwAAAC8EAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAAxBAAAAAAAAAAAAAAxBAAAAAAAADIEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvBAAAAAAAAC8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					533,
					1,
					"insert_completion",
					{
						"completion": "nx_temp_graph",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nx_temp_graph"
					},
					"AgAAAC8EAAAAAAAALwQAAAAAAAADAAAAbnhfLwQAAAAAAAA8BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyBAAAAAAAADIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					538,
					1,
					"left_delete",
					null,
					"AQAAAEIEAAAAAAAAQgQAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDBAAAAAAAAEMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BQAAAEIEAAAAAAAAQwQAAAAAAAAAAAAAQwQAAAAAAABLBAAAAAAAAAAAAABDBAAAAAAAAEMEAAAAAAAACAAAACAgICAgICAgQwQAAAAAAABPBAAAAAAAAAAAAABPBAAAAAAAAFMEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCBAAAAAAAAEIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					543,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 1238,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data, edge_weight: Optional[EdgeWeights] = None,\n              undirected: bool = True):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n    if undirected:\n        nx_temp_graph = nx_temp_graph.to_undirected()\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = None\n\n    if edge_weight is None:\n        edge_color = 'black'\n        widths = None\n    else:\n        edge_color = [edge_weight[(u, v)] for u, v in nx_temp_graph.edges()]\n        widths = [x * 10 for x in edge_color]\n\n    nx.draw_networkx(nx_temp_graph, pos,\n                     width=widths,\n                     # edge_color=edge_color,\n                     )\n\n    if edge_weight is not None:\n        edge_labels = {k: ('%.2f' % v) for k, v in edge_weight.items()}\n        nx.draw_networkx_edge_labels(nx_temp_graph, pos,\n                                     edge_labels=edge_labels,\n                                     font_color='magenta')\n\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAA6wQAAAAAAADWBAAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwgZWRnZV93ZWlnaHQ6IE9wdGlvbmFsW0VkZ2VXZWlnaHRzXSA9IE5vbmUsCiAgICAgICAgICAgICAgdW5kaXJlY3RlZDogYm9vbCA9IFRydWUpOgogICAgbnhfdGVtcF9ncmFwaCA9IHB5Z3JhcGhfdG9fbnhfZ3JhcGgoZGF0YSkKICAgIGlmIHVuZGlyZWN0ZWQ6CiAgICAgICAgbnhfdGVtcF9ncmFwaCA9IG54X3RlbXBfZ3JhcGgudG9fdW5kaXJlY3RlZCgpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IE5vbmUKCiAgICBpZiBlZGdlX3dlaWdodCBpcyBOb25lOgogICAgICAgIGVkZ2VfY29sb3IgPSAnYmxhY2snCiAgICAgICAgd2lkdGhzID0gTm9uZQogICAgZWxzZToKICAgICAgICBlZGdlX2NvbG9yID0gW2VkZ2Vfd2VpZ2h0Wyh1LCB2KV0gZm9yIHUsIHYgaW4gbnhfdGVtcF9ncmFwaC5lZGdlcygpXQogICAgICAgIHdpZHRocyA9IFt4ICogMTAgZm9yIHggaW4gZWRnZV9jb2xvcl0KCiAgICBueC5kcmF3X25ldHdvcmt4KG54X3RlbXBfZ3JhcGgsIHBvcywKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9d2lkdGhzLAogICAgICAgICAgICAgICAgICAgICAjIGVkZ2VfY29sb3I9ZWRnZV9jb2xvciwKICAgICAgICAgICAgICAgICAgICAgKQoKICAgIGlmIGVkZ2Vfd2VpZ2h0IGlzIG5vdCBOb25lOgogICAgICAgIGVkZ2VfbGFiZWxzID0ge2s6ICgnJS4yZicgJSB2KSBmb3IgaywgdiBpbiBlZGdlX3dlaWdodC5pdGVtcygpfQogICAgICAgIG54LmRyYXdfbmV0d29ya3hfZWRnZV9sYWJlbHMobnhfdGVtcF9ncmFwaCwgcG9zLAogICAgICAgICAgICAgICAgZWRnZV9sYWJlbHM9ZWRnZV9sYWJlbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250X2NvbG9yPSdtYWdlbnRhJykKCiAgICBwbHQudGl0bGUoZiJpc19wbGFuYXI9e2Jvb2woZGF0YS55WzBdKX0iKQo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTBAAAAAAAAFMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					572,
					2,
					"left_delete",
					null,
					"AgAAAPgCAAAAAAAA+AIAAAAAAAABAAAAMPcCAAAAAAAA9wIAAAAAAAABAAAAMQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AgAAAAAAAPkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AgAAAAAAAPcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					608,
					1,
					"paste",
					null,
					"AgAAADUCAAAAAAAASwIAAAAAAAAAAAAASwIAAAAAAABLAgAAAAAAAAQAAABOb25l",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AgAAAAAAADkCAAAAAAAA////////738"
				],
				[
					610,
					7,
					"right_delete",
					null,
					"BwAAAC8CAAAAAAAALwIAAAAAAAABAAAAcC8CAAAAAAAALwIAAAAAAAABAAAAby8CAAAAAAAALwIAAAAAAAABAAAAcy8CAAAAAAAALwIAAAAAAAABAAAAIC8CAAAAAAAALwIAAAAAAAABAAAAPS8CAAAAAAAALwIAAAAAAAABAAAAIC8CAAAAAAAALwIAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAAUkA"
				],
				[
					611,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAC8CAAAAAAAAMAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					613,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEUCAAAAAAAARwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFAgAAAAAAAEUCAAAAAAAA////////738"
				],
				[
					614,
					1,
					"insert",
					{
						"characters": "nx_em\\"
					},
					"BgAAAEYCAAAAAAAARwIAAAAAAAAAAAAARwIAAAAAAABIAgAAAAAAAAAAAABIAgAAAAAAAEkCAAAAAAAAAAAAAEkCAAAAAAAASgIAAAAAAAAAAAAASgIAAAAAAABLAgAAAAAAAAAAAABLAgAAAAAAAEwCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGAgAAAAAAAEYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					615,
					3,
					"left_delete",
					null,
					"AwAAAEsCAAAAAAAASwIAAAAAAAABAAAAXEoCAAAAAAAASgIAAAAAAAABAAAAbUkCAAAAAAAASQIAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAgAAAAAAAEwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": "tep"
					},
					"AwAAAEkCAAAAAAAASgIAAAAAAAAAAAAASgIAAAAAAABLAgAAAAAAAAAAAABLAgAAAAAAAEwCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAgAAAAAAAEkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					617,
					1,
					"insert_completion",
					{
						"completion": "nx_temp_graph",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nx_temp_graph"
					},
					"AgAAAEYCAAAAAAAARgIAAAAAAAAGAAAAbnhfdGVwRgIAAAAAAABTAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAgAAAAAAAEwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					619,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFQCAAAAAAAAVQIAAAAAAAAAAAAAVQIAAAAAAABdAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUAgAAAAAAAFQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					620,
					1,
					"paste",
					null,
					"AQAAAF0CAAAAAAAAhAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdAgAAAAAAAF0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					622,
					1,
					"unindent",
					null,
					"AQAAAFUCAAAAAAAAVQIAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAgAAAAAAAFUCAAAAAAAAAAAAAAAAAAA"
				],
				[
					624,
					1,
					"left_delete",
					null,
					"AQAAAHQCAAAAAAAAdAIAAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AgAAAAAAAHUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": "nx_p"
					},
					"BAAAAHQCAAAAAAAAdQIAAAAAAAAAAAAAdQIAAAAAAAB2AgAAAAAAAAAAAAB2AgAAAAAAAHcCAAAAAAAAAAAAAHcCAAAAAAAAeAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0AgAAAAAAAHQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					626,
					1,
					"insert_completion",
					{
						"completion": "nx_temp_graph",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nx_temp_graph"
					},
					"AgAAAHQCAAAAAAAAdAIAAAAAAAAEAAAAbnhfcHQCAAAAAAAAgQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4AgAAAAAAAHgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					632,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 1341,
						"text": "from matplotlib import pyplot as plt\nfrom torch_geometric.data import Data\nfrom utils import pygraph_to_nx_graph\nfrom typing import Optional, Dict, Tuple\nimport networkx as nx\n\n\nEdgeWeights = Dict[Tuple[int, int], float]\n\n\ndef visualize(data: Data, edge_weight: Optional[EdgeWeights] = None,\n              undirected: bool = True):\n    nx_temp_graph = pygraph_to_nx_graph(data)\n    if undirected:\n        nx_temp_graph = nx_temp_graph.to_undirected()\n\n    if data.is_planar:\n        pos = {idx: p.tolist() for idx, p in enumerate(data.pos)}\n    else:\n        pos = nx.planar_layout(nx_temp_graph)\n        pos = nx.spring_layout(nx_temp_graph, pos=pos)\n\n    if edge_weight is None:\n        edge_color = 'black'\n        widths = None\n    else:\n        edge_color = [edge_weight[(u, v)] for u, v in nx_temp_graph.edges()]\n        widths = [x * 3 for x in edge_color]\n\n    nx.draw_networkx(nx_temp_graph, pos,\n                     width=widths,\n                     # edge_color=edge_color,\n                     )\n\n    if edge_weight is not None:\n        edge_labels = {k: ('%.2f' % v) for k, v in edge_weight.items()}\n        nx.draw_networkx_edge_labels(nx_temp_graph, pos,\n                                     edge_labels=edge_labels,\n                                     font_color='magenta')\n\n    plt.title(f\"is_planar={bool(data.y[0])}\")\n"
					},
					"AQAAAAAAAAAAAAAAPAUAAAAAAAA9BQAAZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CmZyb20gdG9yY2hfZ2VvbWV0cmljLmRhdGEgaW1wb3J0IERhdGEKZnJvbSB1dGlscyBpbXBvcnQgcHlncmFwaF90b19ueF9ncmFwaApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIFR1cGxlCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCkVkZ2VXZWlnaHRzID0gRGljdFtUdXBsZVtpbnQsIGludF0sIGZsb2F0XQoKCmRlZiB2aXN1YWxpemUoZGF0YTogRGF0YSwgZWRnZV93ZWlnaHQ6IE9wdGlvbmFsW0VkZ2VXZWlnaHRzXSA9IE5vbmUsCiAgICAgICAgICAgICAgdW5kaXJlY3RlZDogYm9vbCA9IFRydWUpOgogICAgbnhfdGVtcF9ncmFwaCA9IHB5Z3JhcGhfdG9fbnhfZ3JhcGgoZGF0YSkKICAgIGlmIHVuZGlyZWN0ZWQ6CiAgICAgICAgbnhfdGVtcF9ncmFwaCA9IG54X3RlbXBfZ3JhcGgudG9fdW5kaXJlY3RlZCgpCgogICAgaWYgZGF0YS5pc19wbGFuYXI6CiAgICAgICAgcG9zID0ge2lkeDogcC50b2xpc3QoKSBmb3IgaWR4LCBwIGluIGVudW1lcmF0ZShkYXRhLnBvcyl9CiAgICBlbHNlOgogICAgICAgIHBvcyA9IG54LnBsYW5hcl9sYXlvdXQobnhfdGVtcF9ncmFwaCkKICAgICAgICBwb3MgPSBueC5zcHJpbmdfbGF5b3V0KG54X3RlbXBfZ3JhcGgsIHBvcz1wb3MpCgoKICAgIGlmIGVkZ2Vfd2VpZ2h0IGlzIE5vbmU6CiAgICAgICAgZWRnZV9jb2xvciA9ICdibGFjaycKICAgICAgICB3aWR0aHMgPSBOb25lCiAgICBlbHNlOgogICAgICAgIGVkZ2VfY29sb3IgPSBbZWRnZV93ZWlnaHRbKHUsIHYpXSBmb3IgdSwgdiBpbiBueF90ZW1wX2dyYXBoLmVkZ2VzKCldCiAgICAgICAgd2lkdGhzID0gW3ggKiAzIGZvciB4IGluIGVkZ2VfY29sb3JdCgogICAgbnguZHJhd19uZXR3b3JreChueF90ZW1wX2dyYXBoLCBwb3MsCiAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXdpZHRocywKICAgICAgICAgICAgICAgICAgICAgIyBlZGdlX2NvbG9yPWVkZ2VfY29sb3IsCiAgICAgICAgICAgICAgICAgICAgICkKCiAgICBpZiBlZGdlX3dlaWdodCBpcyBub3QgTm9uZToKICAgICAgICBlZGdlX2xhYmVscyA9IHtrOiAoJyUuMmYnICUgdikgZm9yIGssIHYgaW4gZWRnZV93ZWlnaHQuaXRlbXMoKX0KICAgICAgICBueC5kcmF3X25ldHdvcmt4X2VkZ2VfbGFiZWxzKG54X3RlbXBfZ3JhcGgsIHBvcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VfbGFiZWxzPWVkZ2VfbGFiZWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9jb2xvcj0nbWFnZW50YScpCgogICAgcGx0LnRpdGxlKGYiaXNfcGxhbmFyPXtib29sKGRhdGEueVswXSl9IikK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAgAAAAAAAIwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAC8CAAAAAAAAMAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAAUkA"
				],
				[
					643,
					1,
					"cut",
					null,
					"AQAAACcCAAAAAAAAJwIAAAAAAAAvAAAAICAgICAgICAjcG9zID0gbngucGxhbmFyX2xheW91dChueF90ZW1wX2dyYXBoKQo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAYkA"
				],
				[
					646,
					9,
					"left_delete",
					null,
					"CQAAAFsCAAAAAAAAWwIAAAAAAAABAAAAc1oCAAAAAAAAWgIAAAAAAAABAAAAb1kCAAAAAAAAWQIAAAAAAAABAAAAcFgCAAAAAAAAWAIAAAAAAAABAAAAPVcCAAAAAAAAVwIAAAAAAAABAAAAc1YCAAAAAAAAVgIAAAAAAAABAAAAb1UCAAAAAAAAVQIAAAAAAAABAAAAcFQCAAAAAAAAVAIAAAAAAAABAAAAIFMCAAAAAAAAUwIAAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAgAAAAAAAFwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					655,
					1,
					"left_delete",
					null,
					"AQAAABIDAAAAAAAAEgMAAAAAAAABAAAAMw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAABIDAAAAAAAAEwMAAAAAAAAAAAAAEwMAAAAAAAAUAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					663,
					2,
					"left_delete",
					null,
					"AgAAAI0DAAAAAAAAjQMAAAAAAAABAAAAIIwDAAAAAAAAjAMAAAAAAAABAAAAIw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAwAAAAAAAI4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					671,
					1,
					"insert",
					{
						"characters": "black"
					},
					"BgAAAMsEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADMBAAAAAAAAAcAAABtYWdlbnRhzAQAAAAAAADNBAAAAAAAAAAAAADNBAAAAAAAAM4EAAAAAAAAAAAAAM4EAAAAAAAAzwQAAAAAAAAAAAAAzwQAAAAAAADQBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLBAAAAAAAANIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEkBAAAAAAAASgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAQAAAAAAAEkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEoBAAAAAAAASwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAQAAAAAAAEoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "max("
					},
					"BAAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABMDAAAAAAAAAAAAABMDAAAAAAAAFAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABoDAAAAAAAAGwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgMAAAAAAAAaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " 0.3)"
					},
					"BQAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAgAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwMAAAAAAAAbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAABgDAAAAAAAAGAMAAAAAAAABAAAAMQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQMAAAAAAAAZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAABgDAAAAAAAAGQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAMAAAAAAAAYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					3,
					"left_delete",
					null,
					"AwAAAB4DAAAAAAAAHgMAAAAAAAABAAAAMx0DAAAAAAAAHQMAAAAAAAABAAAALhwDAAAAAAAAHAMAAAAAAAABAAAAMA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAABwDAAAAAAAAHQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAMAAAAAAAAcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "abs("
					},
					"BAAAABQDAAAAAAAAFQMAAAAAAAAAAAAAFQMAAAAAAAAWAwAAAAAAAAAAAAAWAwAAAAAAABcDAAAAAAAAAAAAABcDAAAAAAAAGAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABkDAAAAAAAAGgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQMAAAAAAAAZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAoDAAAAAAAAAAAAAAoDAAAAAAAACwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QIAAAAAAAD9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAsDAAAAAAAADQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "edge"
					},
					"BAAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAMAAAAAAAAMAwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_completion",
					{
						"completion": "edge_color",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "edge_color"
					},
					"AgAAAAwDAAAAAAAADAMAAAAAAAAEAAAAZWRnZQwDAAAAAAAAFgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwMAAAAAAAAXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAABgDAAAAAAAAGAMAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "alp"
					},
					"AwAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAABNAQAAAAAAAE4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					3,
					"left_delete",
					null,
					"AwAAAE0BAAAAAAAATQEAAAAAAAABAAAAcEwBAAAAAAAATAEAAAAAAAABAAAAbEsBAAAAAAAASwEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAATgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "color+alp"
					},
					"CQAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAABNAQAAAAAAAE4BAAAAAAAAAAAAAE4BAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABQAQAAAAAAAAAAAABQAQAAAAAAAFEBAAAAAAAAAAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAABTAQAAAAAAAFQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					4,
					"left_delete",
					null,
					"BAAAAFMBAAAAAAAAUwEAAAAAAAABAAAAcFIBAAAAAAAAUgEAAAAAAAABAAAAbFEBAAAAAAAAUQEAAAAAAAABAAAAYVABAAAAAAAAUAEAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAVAEAAAAAAABUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "+alph"
					},
					"BQAAAFABAAAAAAAAUQEAAAAAAAAAAAAAUQEAAAAAAABSAQAAAAAAAAAAAABSAQAAAAAAAFMBAAAAAAAAAAAAAFMBAAAAAAAAVAEAAAAAAAAAAAAAVAEAAAAAAABVAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAEAAAAAAABQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					5,
					"left_delete",
					null,
					"BQAAAFQBAAAAAAAAVAEAAAAAAAABAAAAaFMBAAAAAAAAUwEAAAAAAAABAAAAcFIBAAAAAAAAUgEAAAAAAAABAAAAbFEBAAAAAAAAUQEAAAAAAAABAAAAYVABAAAAAAAAUAEAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "_alphs"
					},
					"BgAAAFABAAAAAAAAUQEAAAAAAAAAAAAAUQEAAAAAAABSAQAAAAAAAAAAAABSAQAAAAAAAFMBAAAAAAAAAAAAAFMBAAAAAAAAVAEAAAAAAAAAAAAAVAEAAAAAAABVAQAAAAAAAAAAAABVAQAAAAAAAFYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAEAAAAAAABQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAFUBAAAAAAAAVQEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAFUBAAAAAAAAVQEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "a="
					},
					"AgAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "30"
					},
					"AgAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					3,
					"left_delete",
					null,
					"AwAAAEcDAAAAAAAARwMAAAAAAAABAAAAMEYDAAAAAAAARgMAAAAAAAABAAAAM0UDAAAAAAAARQMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAASAMAAAAAAABIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " color"
					},
					"BgAAAEUDAAAAAAAARgMAAAAAAAAAAAAARgMAAAAAAABHAwAAAAAAAAAAAABHAwAAAAAAAEgDAAAAAAAAAAAAAEgDAAAAAAAASQMAAAAAAAAAAAAASQMAAAAAAABKAwAAAAAAAAAAAABKAwAAAAAAAEsDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQMAAAAAAABFAwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_completion",
					{
						"completion": "color_alpha",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "color_alpha"
					},
					"AgAAAEYDAAAAAAAARgMAAAAAAAAFAAAAY29sb3JGAwAAAAAAAFEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwMAAAAAAABLAwAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "min"
					},
					"BAAAADkDAAAAAAAAOgMAAAAAAAAAAAAAOgMAAAAAAAA6AwAAAAAAAAMAAABtYXg6AwAAAAAAADsDAAAAAAAAAAAAADsDAAAAAAAAPAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQMAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					4,
					"left_delete",
					null,
					"BAAAADwDAAAAAAAAPAMAAAAAAAABAAAAKDsDAAAAAAAAOwMAAAAAAAABAAAAbjoDAAAAAAAAOgMAAAAAAAABAAAAaTkDAAAAAAAAOQMAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAPQMAAAAAAAA9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					4,
					"left_delete",
					null,
					"BAAAAFADAAAAAAAAUAMAAAAAAAABAAAAKU8DAAAAAAAATwMAAAAAAAABAAAAMU4DAAAAAAAATgMAAAAAAAABAAAAIE0DAAAAAAAATQMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAUQMAAAAAAABRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAGIDAAAAAAAAYwMAAAAAAAAAAAAAYwMAAAAAAABrAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQMAAAAAAABNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					3,
					"left_delete",
					null,
					"AwAAAGcDAAAAAAAAZwMAAAAAAAAEAAAAICAgIGMDAAAAAAAAYwMAAAAAAAAEAAAAICAgIGIDAAAAAAAAYgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAawMAAAAAAABrAwAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					2,
					"left_delete",
					null,
					"AgAAAFgBAAAAAAAAWAEAAAAAAAABAAAAMFcBAAAAAAAAVwEAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "04"
					},
					"AgAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"left_delete",
					null,
					"AQAAAFgBAAAAAAAAWAEAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": ".4"
					},
					"AgAAAFgBAAAAAAAAWQEAAAAAAAAAAAAAWQEAAAAAAABaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAEAAAAAAABYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"left_delete",
					null,
					"AQAAAFkBAAAAAAAAWQEAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAWgEAAAAAAABaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAFkBAAAAAAAAWgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					2,
					"cut",
					null,
					"AgAAAA0DAAAAAAAADQMAAAAAAAAaAAAAICAgICAgICBwcmludChlZGdlX2NvbG9yKQoNAwAAAAAAAA0DAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAJgMAAAAAAAAmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEkDAAAAAAAASgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQMAAAAAAABJAwAAAAAAAAAAAAAAAFRA"
				],
				[
					287,
					1,
					"paste",
					null,
					"AQAAAEoDAAAAAAAAaQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEoDAAAAAAAATgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAAAA"
				],
				[
					292,
					2,
					"right_delete",
					null,
					"AgAAAFkDAAAAAAAAWQMAAAAAAAABAAAAM1kDAAAAAAAAWQMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWQMAAAAAAABZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"right_delete",
					null,
					"AQAAAGoDAAAAAAAAagMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAagMAAAAAAABqAwAAAAAAAP///////+9/"
				],
				[
					295,
					1,
					"left_delete",
					null,
					"AQAAAGkDAAAAAAAAaQMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAagMAAAAAAABqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGkDAAAAAAAAagMAAAAAAAAAAAAAagMAAAAAAABuAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQMAAAAAAABpAwAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"left_delete",
					null,
					"AQAAAGoDAAAAAAAAagMAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAbgMAAAAAAABuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"cut",
					null,
					"AQAAAEoDAAAAAAAASgMAAAAAAAAgAAAAICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTIsMTIpKQo",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAAAA"
				],
				[
					300,
					1,
					"right_delete",
					null,
					"AQAAAEoDAAAAAAAASgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/dataset/split.py",
			"settings":
			{
				"buffer_size": 775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " batch_sze"
					},
					"CgAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKkAAAAAAAAAAAAAAKkAAAAAAAAAqgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAKkAAAAAAAAAqQAAAAAAAAABAAAAZagAAAAAAAAAqAAAAAAAAAABAAAAeg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAAAAAAAAAKoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAKgAAAAAAAAAqQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAKgAAAAAAAAAqAAAAAAAAAABAAAAdQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAAAAAAAAAKkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "ize=64"
					},
					"BgAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 781,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64) -> Tuple[DataLoader,\n                                                                       DataLoader]:\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(train_ds_small, batch_size=64, shuffle=True)\n    test_loader = DataLoader(test_ds_small, batch_size=64, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAAHAMAAAAAAAANAwAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0KSAtPiBUdXBsZVtEYXRhTG9hZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFMb2FkZXJdOgogICAgZGF0YXNldF9zaHVmZmxlZCA9IGRhdGFzZXQuc2h1ZmZsZSgpCiAgICBOID0gbGVuKGRhdGFzZXRfc2h1ZmZsZWQpCiAgICB0cmFpbl9jb3VudCA9IGludChOKnNoYXJlKQogICAgdHJhaW5fZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkWzp0cmFpbl9jb3VudF0KICAgIHRlc3RfZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkW3RyYWluX2NvdW50Ol0KCiAgICBwcmludChmJ051bWJlciBvZiB0cmFpbmluZyBncmFwaHM6IHtsZW4odHJhaW5fZHNfc21hbGwpfScpCiAgICBwcmludChmJ051bWJlciBvZiB0ZXN0IGdyYXBoczoge2xlbih0ZXN0X2RzX3NtYWxsKX0nKQoKICAgIHRyYWluX2xvYWRlciA9IERhdGFMb2FkZXIodHJhaW5fZHNfc21hbGwsIGJhdGNoX3NpemU9NjQsIHNodWZmbGU9VHJ1ZSkKICAgIHRlc3RfbG9hZGVyID0gRGF0YUxvYWRlcih0ZXN0X2RzX3NtYWxsLCBiYXRjaF9zaXplPTY0LCBzaHVmZmxlPUZhbHNlKQoKICAgIHJldHVybiB0cmFpbl9sb2FkZXIsIHRlc3RfbG9hZGVyCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAK8AAAAAAAAArwAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AgAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"unindent",
					null,
					"AQAAAMkAAAAAAAAAyQAAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAAQkA"
				],
				[
					37,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 796,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64)\n\n\n-> Tuple[DataLoader,\n         DataLoader]:\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(train_ds_small, batch_size=64, shuffle=True)\n    test_loader = DataLoader(test_ds_small, batch_size=64, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAA4AIAAAAAAAAcAwAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0KQogICAgLT4gVHVwbGVbRGF0YUxvYWRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFMb2FkZXJdOgogICAgZGF0YXNldF9zaHVmZmxlZCA9IGRhdGFzZXQuc2h1ZmZsZSgpCiAgICBOID0gbGVuKGRhdGFzZXRfc2h1ZmZsZWQpCiAgICB0cmFpbl9jb3VudCA9IGludChOKnNoYXJlKQogICAgdHJhaW5fZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkWzp0cmFpbl9jb3VudF0KICAgIHRlc3RfZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkW3RyYWluX2NvdW50Ol0KCiAgICBwcmludChmJ051bWJlciBvZiB0cmFpbmluZyBncmFwaHM6IHtsZW4odHJhaW5fZHNfc21hbGwpfScpCiAgICBwcmludChmJ051bWJlciBvZiB0ZXN0IGdyYXBoczoge2xlbih0ZXN0X2RzX3NtYWxsKX0nKQoKICAgIHRyYWluX2xvYWRlciA9IERhdGFMb2FkZXIodHJhaW5fZHNfc21hbGwsIGJhdGNoX3NpemU9NjQsIHNodWZmbGU9VHJ1ZSkKICAgIHRlc3RfbG9hZGVyID0gRGF0YUxvYWRlcih0ZXN0X2RzX3NtYWxsLCBiYXRjaF9zaXplPTY0LCBzaHVmZmxlPUZhbHNlKQoKICAgIHJldHVybiB0cmFpbl9sb2FkZXIsIHRlc3RfbG9hZGVyCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"cut",
					null,
					"AgAAALAAAAAAAAAAsAAAAAAAAAABAAAACrAAAAAAAAAAsAAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 734,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64)\n\n\n-> Tuple[DataLoader,\n         DataLoader]:\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(train_ds_small, batch_size=64, shuffle=True)\n    test_loader = DataLoader(test_ds_small, batch_size=64, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAA4AIAAAAAAADeAgAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0KQotPiBUdXBsZVtEYXRhTG9hZGVyLAogICAgICAgICBEYXRhTG9hZGVyXToKICAgIGRhdGFzZXRfc2h1ZmZsZWQgPSBkYXRhc2V0LnNodWZmbGUoKQogICAgTiA9IGxlbihkYXRhc2V0X3NodWZmbGVkKQogICAgdHJhaW5fY291bnQgPSBpbnQoTipzaGFyZSkKICAgIHRyYWluX2RzX3NtYWxsID0gZGF0YXNldF9zaHVmZmxlZFs6dHJhaW5fY291bnRdCiAgICB0ZXN0X2RzX3NtYWxsID0gZGF0YXNldF9zaHVmZmxlZFt0cmFpbl9jb3VudDpdCgogICAgcHJpbnQoZidOdW1iZXIgb2YgdHJhaW5pbmcgZ3JhcGhzOiB7bGVuKHRyYWluX2RzX3NtYWxsKX0nKQogICAgcHJpbnQoZidOdW1iZXIgb2YgdGVzdCBncmFwaHM6IHtsZW4odGVzdF9kc19zbWFsbCl9JykKCiAgICB0cmFpbl9sb2FkZXIgPSBEYXRhTG9hZGVyKHRyYWluX2RzX3NtYWxsLCBiYXRjaF9zaXplPTY0LCBzaHVmZmxlPVRydWUpCiAgICB0ZXN0X2xvYWRlciA9IERhdGFMb2FkZXIodGVzdF9kc19zbWFsbCwgYmF0Y2hfc2l6ZT02NCwgc2h1ZmZsZT1GYWxzZSkKCiAgICByZXR1cm4gdHJhaW5fbG9hZGVyLCB0ZXN0X2xvYWRlcgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					3,
					"left_delete",
					null,
					"AwAAALEAAAAAAAAAsQAAAAAAAAABAAAACrAAAAAAAAAAsAAAAAAAAAABAAAACq8AAAAAAAAArwAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAAAAA"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8AAAAAAAAAsAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAALIAAAAAAAAAsgAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AgAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC3AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"unindent",
					null,
					"AQAAAMkAAAAAAAAAyQAAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAAQkA"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAMgAAAAAAAAAyAAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 733,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64) ->\n\n\nTuple[DataLoader,     DataLoader]:\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(train_ds_small, batch_size=64, shuffle=True)\n    test_loader = DataLoader(test_ds_small, batch_size=64, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAA2wIAAAAAAADdAgAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0KSAtPgogICAgVHVwbGVbRGF0YUxvYWRlciwgICAgIERhdGFMb2FkZXJdOgogICAgZGF0YXNldF9zaHVmZmxlZCA9IGRhdGFzZXQuc2h1ZmZsZSgpCiAgICBOID0gbGVuKGRhdGFzZXRfc2h1ZmZsZWQpCiAgICB0cmFpbl9jb3VudCA9IGludChOKnNoYXJlKQogICAgdHJhaW5fZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkWzp0cmFpbl9jb3VudF0KICAgIHRlc3RfZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkW3RyYWluX2NvdW50Ol0KCiAgICBwcmludChmJ051bWJlciBvZiB0cmFpbmluZyBncmFwaHM6IHtsZW4odHJhaW5fZHNfc21hbGwpfScpCiAgICBwcmludChmJ051bWJlciBvZiB0ZXN0IGdyYXBoczoge2xlbih0ZXN0X2RzX3NtYWxsKX0nKQoKICAgIHRyYWluX2xvYWRlciA9IERhdGFMb2FkZXIodHJhaW5fZHNfc21hbGwsIGJhdGNoX3NpemU9NjQsIHNodWZmbGU9VHJ1ZSkKICAgIHRlc3RfbG9hZGVyID0gRGF0YUxvYWRlcih0ZXN0X2RzX3NtYWxsLCBiYXRjaF9zaXplPTY0LCBzaHVmZmxlPUZhbHNlKQoKICAgIHJldHVybiB0cmFpbl9sb2FkZXIsIHRlc3RfbG9hZGVyCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					3,
					"right_delete",
					null,
					"AwAAAMgAAAAAAAAAyAAAAAAAAAABAAAAIMgAAAAAAAAAyAAAAAAAAAABAAAAIMgAAAAAAAAAyAAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAMcAAAAAAAAAxwAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANMAAAAAAAAA1AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAA////////738"
				],
				[
					79,
					2,
					"cut",
					null,
					"AgAAALMAAAAAAAAAswAAAAAAAAABAAAACrMAAAAAAAAAswAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAAAAA"
				],
				[
					80,
					1,
					"left_delete",
					null,
					"AQAAALIAAAAAAAAAsgAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALIAAAAAAAAAswAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACzAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 731,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64\n                  ) -> Tuple[DataLoader, DataLoader]:\n\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(train_ds_small, batch_size=64, shuffle=True)\n    test_loader = DataLoader(test_ds_small, batch_size=64, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAA6QIAAAAAAADbAgAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0CiAgICApIC0+IFR1cGxlW0RhdGFMb2FkZXIsIERhdGFMb2FkZXJdOgoKICAgIGRhdGFzZXRfc2h1ZmZsZWQgPSBkYXRhc2V0LnNodWZmbGUoKQogICAgTiA9IGxlbihkYXRhc2V0X3NodWZmbGVkKQogICAgdHJhaW5fY291bnQgPSBpbnQoTipzaGFyZSkKICAgIHRyYWluX2RzX3NtYWxsID0gZGF0YXNldF9zaHVmZmxlZFs6dHJhaW5fY291bnRdCiAgICB0ZXN0X2RzX3NtYWxsID0gZGF0YXNldF9zaHVmZmxlZFt0cmFpbl9jb3VudDpdCgogICAgcHJpbnQoZidOdW1iZXIgb2YgdHJhaW5pbmcgZ3JhcGhzOiB7bGVuKHRyYWluX2RzX3NtYWxsKX0nKQogICAgcHJpbnQoZidOdW1iZXIgb2YgdGVzdCBncmFwaHM6IHtsZW4odGVzdF9kc19zbWFsbCl9JykKCiAgICB0cmFpbl9sb2FkZXIgPSBEYXRhTG9hZGVyKHRyYWluX2RzX3NtYWxsLCBiYXRjaF9zaXplPTY0LCBzaHVmZmxlPVRydWUpCiAgICB0ZXN0X2xvYWRlciA9IERhdGFMb2FkZXIodGVzdF9kc19zbWFsbCwgYmF0Y2hfc2l6ZT02NCwgc2h1ZmZsZT1GYWxzZSkKCiAgICByZXR1cm4gdHJhaW5fbG9hZGVyLCB0ZXN0X2xvYWRlcgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"cut",
					null,
					"AQAAAOUAAAAAAAAA5QAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAAAAAAAAAOUAAAAAAAAAAAAAAAAAQkA"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK4AAAAAAAAArwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAA////////738"
				],
				[
					107,
					2,
					"left_delete",
					null,
					"AgAAAGgCAAAAAAAAaAIAAAAAAAABAAAANGcCAAAAAAAAZwIAAAAAAAABAAAANg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpAgAAAAAAAGkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "batch_size"
					},
					"CgAAAGcCAAAAAAAAaAIAAAAAAAAAAAAAaAIAAAAAAABpAgAAAAAAAAAAAABpAgAAAAAAAGoCAAAAAAAAAAAAAGoCAAAAAAAAawIAAAAAAAAAAAAAawIAAAAAAABsAgAAAAAAAAAAAABsAgAAAAAAAG0CAAAAAAAAAAAAAG0CAAAAAAAAbgIAAAAAAAAAAAAAbgIAAAAAAABvAgAAAAAAAAAAAABvAgAAAAAAAHACAAAAAAAAAAAAAHACAAAAAAAAcQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAgAAAAAAAGcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "batch_sze"
					},
					"CgAAALgCAAAAAAAAuQIAAAAAAAAAAAAAuQIAAAAAAAC5AgAAAAAAAAIAAAA2NLkCAAAAAAAAugIAAAAAAAAAAAAAugIAAAAAAAC7AgAAAAAAAAAAAAC7AgAAAAAAALwCAAAAAAAAAAAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC+AgAAAAAAAAAAAAC+AgAAAAAAAL8CAAAAAAAAAAAAAL8CAAAAAAAAwAIAAAAAAAAAAAAAwAIAAAAAAADBAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AgAAAAAAALoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAL8CAAAAAAAAwAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AgAAAAAAAL8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 761,
						"text": "from torch_geometric.data import Dataset\nfrom torch_geometric.loader import DataLoader\nfrom typing import Tuple\n\n\ndef split_dataset(dataset: Dataset, share=0.8, batch_size=64,\n                  ) -> Tuple[DataLoader, DataLoader]:\n    dataset_shuffled = dataset.shuffle()\n    N = len(dataset_shuffled)\n    train_count = int(N*share)\n    train_ds_small = dataset_shuffled[:train_count]\n    test_ds_small = dataset_shuffled[train_count:]\n\n    print(f'Number of training graphs: {len(train_ds_small)}')\n    print(f'Number of test graphs: {len(test_ds_small)}')\n\n    train_loader = DataLoader(\n        train_ds_small, batch_size=batch_size, shuffle=True)\n    test_loader = DataLoader(\n        test_ds_small, batch_size=batch_size, shuffle=False)\n\n    return train_loader, test_loader\n"
					},
					"AQAAAAAAAAAAAAAACwMAAAAAAAD5AgAAZnJvbSB0b3JjaF9nZW9tZXRyaWMuZGF0YSBpbXBvcnQgRGF0YXNldApmcm9tIHRvcmNoX2dlb21ldHJpYy5sb2FkZXIgaW1wb3J0IERhdGFMb2FkZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFR1cGxlCgoKZGVmIHNwbGl0X2RhdGFzZXQoZGF0YXNldDogRGF0YXNldCwgc2hhcmU9MC44LCBiYXRjaF9zaXplPTY0LAogICAgICAgICAgICAgICAgICApIC0+IFR1cGxlW0RhdGFMb2FkZXIsIERhdGFMb2FkZXJdOgogICAgZGF0YXNldF9zaHVmZmxlZCA9IGRhdGFzZXQuc2h1ZmZsZSgpCiAgICBOID0gbGVuKGRhdGFzZXRfc2h1ZmZsZWQpCiAgICB0cmFpbl9jb3VudCA9IGludChOKnNoYXJlKQogICAgdHJhaW5fZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkWzp0cmFpbl9jb3VudF0KICAgIHRlc3RfZHNfc21hbGwgPSBkYXRhc2V0X3NodWZmbGVkW3RyYWluX2NvdW50Ol0KCiAgICBwcmludChmJ051bWJlciBvZiB0cmFpbmluZyBncmFwaHM6IHtsZW4odHJhaW5fZHNfc21hbGwpfScpCiAgICBwcmludChmJ051bWJlciBvZiB0ZXN0IGdyYXBoczoge2xlbih0ZXN0X2RzX3NtYWxsKX0nKQoKICAgIHRyYWluX2xvYWRlciA9IERhdGFMb2FkZXIodHJhaW5fZHNfc21hbGwsIGJhdGNoX3NpemU9YmF0Y2hfc2l6ZSwgc2h1ZmZsZT1UcnVlKQogICAgdGVzdF9sb2FkZXIgPSBEYXRhTG9hZGVyKHRlc3RfZHNfc21hbGwsIGJhdGNoX3NpemU9YmF0Y2hfc2l6ZSwgc2h1ZmZsZT1GYWxzZSkKCiAgICByZXR1cm4gdHJhaW5fbG9hZGVyLCB0ZXN0X2xvYWRlcgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAgAAAAAAANMCAAAAAAAAAAAAAAAAAAA"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAFsAAAAAAAAAXAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbAAAAAAAAAFsAAAAAAAAAAAAAAAAAQkA"
				],
				[
					175,
					1,
					"left_delete",
					null,
					"AQAAAFsAAAAAAAAAWwAAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "shufffle"
					},
					"CAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					3,
					"left_delete",
					null,
					"AwAAAMkAAAAAAAAAyQAAAAAAAAABAAAAZcgAAAAAAAAAyAAAAAAAAAABAAAAbMcAAAAAAAAAxwAAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "le=True"
					},
					"BwAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAADJAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD7AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAEJA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAEJA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " husslf"
					},
					"BwAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA+QAAAAAAAAD6AAAAAAAAAAAAAAD6AAAAAAAAAPsAAAAAAAAAAAAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAD9AAAAAAAAAAAAAAD9AAAAAAAAAP4AAAAAAAAAAAAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					6,
					"left_delete",
					null,
					"BgAAAP4AAAAAAAAA/gAAAAAAAAABAAAAZv0AAAAAAAAA/QAAAAAAAAABAAAAbPwAAAAAAAAA/AAAAAAAAAABAAAAc/sAAAAAAAAA+wAAAAAAAAABAAAAc/oAAAAAAAAA+gAAAAAAAAABAAAAdfkAAAAAAAAA+QAAAAAAAAABAAAAaA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "shu"
					},
					"AwAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAD7AAAAAAAAAPwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "shuffle",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "shuffle"
					},
					"AgAAAPkAAAAAAAAA+QAAAAAAAAADAAAAc2h1+QAAAAAAAAAAAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAAABAAAAAAAAAQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAYBAAAAAAAACgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAEJA"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAA3AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgEAAAAAAAAuAQAAAAAAAP///////+9/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAADMBAAAAAAAAMwEAAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "else:"
					},
					"BQAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAAAYBAAAAAAAABgEAAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgEAAAAAAAAKAQAAAAAAAAAAAAAAAFJA"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAYBAAAAAAAACgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAEJA"
				],
				[
					49,
					9,
					"left_delete",
					null,
					"CQAAABkBAAAAAAAAGQEAAAAAAAABAAAAZBgBAAAAAAAAGAEAAAAAAAABAAAAZRcBAAAAAAAAFwEAAAAAAAABAAAAbBYBAAAAAAAAFgEAAAAAAAABAAAAZhUBAAAAAAAAFQEAAAAAAAABAAAAZhQBAAAAAAAAFAEAAAAAAAABAAAAdRMBAAAAAAAAEwEAAAAAAAABAAAAaBIBAAAAAAAAEgEAAAAAAAABAAAAcxEBAAAAAAAAEQEAAAAAAAABAAAAXw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgEAAAAAAAAaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"cut",
					null,
					"AQAAACYBAAAAAAAAJgEAAAAAAAAKAAAAICAgIGVsc2U6Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwEAAAAAAAAvAQAAAAAAAAAAAAAA4GBA"
				],
				[
					53,
					9,
					"left_delete",
					null,
					"CQAAAEEBAAAAAAAAQQEAAAAAAAABAAAAZEABAAAAAAAAQAEAAAAAAAABAAAAZT8BAAAAAAAAPwEAAAAAAAABAAAAbD4BAAAAAAAAPgEAAAAAAAABAAAAZj0BAAAAAAAAPQEAAAAAAAABAAAAZjwBAAAAAAAAPAEAAAAAAAABAAAAdTsBAAAAAAAAOwEAAAAAAAABAAAAaDoBAAAAAAAAOgEAAAAAAAABAAAAczkBAAAAAAAAOQEAAAAAAAABAAAAXw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgEAAAAAAABCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					9,
					"left_delete",
					null,
					"CQAAAH4BAAAAAAAAfgEAAAAAAAABAAAAZH0BAAAAAAAAfQEAAAAAAAABAAAAZXwBAAAAAAAAfAEAAAAAAAABAAAAbHsBAAAAAAAAewEAAAAAAAABAAAAZnoBAAAAAAAAegEAAAAAAAABAAAAZnkBAAAAAAAAeQEAAAAAAAABAAAAdXgBAAAAAAAAeAEAAAAAAAABAAAAaHcBAAAAAAAAdwEAAAAAAAABAAAAc3YBAAAAAAAAdgEAAAAAAAABAAAAXw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAKABAAAAAAAAoAEAAAAAAAAJAAAAX3NodWZmbGVk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/captum.py",
			"redo_stack":
			[
				[
					130,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AgAAAAMHAAAAAAAADAcAAAAAAAAAAAAAAgcAAAAAAAACBwAAAAAAAAEAAABg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMHAAAAAAAAAwcAAAAAAAAAAAAAAADwvw"
				]
			],
			"settings":
			{
				"buffer_size": 12489,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/gnn_explainer.py",
			"redo_stack":
			[
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAF4CAAAAAAAAfgIAAAAAAAAAAAAAWgIAAAAAAABaAgAAAAAAAAQAAAAgICAgWQIAAAAAAABZAgAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4CAAAAAAAAXgIAAAAAAAAAAAAAAADwvw"
				]
			],
			"settings":
			{
				"buffer_size": 11149,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/base.py",
			"settings":
			{
				"buffer_size": 6899,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/config.py",
			"redo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "ƒ"
					},
					"AQAAAAoDAAAAAAAACgMAAAAAAAACAAAAxpI",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 7834,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/explainer.py",
			"settings":
			{
				"buffer_size": 10375,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/captum_explainer.py",
			"redo_stack":
			[
				[
					72,
					1,
					"insert",
					{
						"characters": "\\\\\\"
					},
					"BAAAAPQHAAAAAAAA9AcAAAAAAAABAAAAXPMHAAAAAAAA8wcAAAAAAAABAAAAXPMHAAAAAAAAIwgAAAAAAAAAAAAA8gcAAAAAAADyBwAAAAAAAAEAAABc",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUHAAAAAAAA9QcAAAAAAAAAAAAAAADwvw"
				]
			],
			"settings":
			{
				"buffer_size": 6540,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/nn/conv/sage_conv.py",
			"settings":
			{
				"buffer_size": 5813,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"for",
				"AutoPEP8: Format Code"
			],
			[
				"prefere",
				"Preferences: Settings"
			],
			[
				"pep8",
				"Preferences: AutoPep8 Settings – User"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install o",
				"Package Control: Install Package"
			],
			[
				"install",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm"
	],
	"file_history":
	[
		"/Users/researcher/personal/machine_learning_paper_reviews/src/model/conv_gnn.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/contrib/explain/graphmask_explainer.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/nn/models/basic_gnn.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/visualization/visualization.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/model/sage.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/training/train_eval.py",
		"/Users/researcher/Documents/feedback_requests.txt",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/datasets/fake.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/planar.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/data/in_memory_dataset.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/visualization/metric_fmt.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/model/__init__.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/utils.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/split.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/training/train_eval_graphless.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/sum_node_features.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/model/gcn.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/__init__.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/training/__init__.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/is_planar_transform.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/transforms/compose.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/transforms/one_hot_degree.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/utils/degree.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/utils/num_nodes.py",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/data/datapipes.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/visualization/__init__.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/dataset/feature_generators.py",
		"/Users/researcher/personal/machine_learning_paper_reviews/GNN_and_algorithmically_solvable_tasks.md",
		"/Users/researcher/Library/Application Support/Sublime Text/Packages/User/AutoPep8.sublime-settings",
		"/Users/researcher/personal/machine_learning_paper_reviews/src/.gitignore",
		"/Users/researcher/personal/machine_learning_paper_reviews/.gitignore",
		"/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/nn/pool/__init__.py",
		"/Users/researcher/Documents/rw_Aug.sh",
		"/Visa application form (original) (see here)",
		"/Users/researcher/Downloads/flow-cli canary --name \"Test RW\" commerce.optimiza",
		"/Users/researcher/Downloads/mlhub_october_mc_rw_fb_grate_export.csv",
		"/Users/researcher/Documents/PSC_H1_2023.tx",
		"/Users/researcher/work/interleving_testing/test.py",
		"/Users/researcher/Documents/no_non_visual_vars.csv",
		"/Users/researcher/Documents/v4_stats.csv",
		"/Users/researcher/Documents/v4_3d_variants.csv",
		"/Users/researcher/Documents/v4_variants.csv",
		"/Users/researcher/Documents/v3_notfin_variants.csv",
		"/Users/researcher/Documents/v3_stats.csv",
		"/Users/researcher/Documents/v3_variants.csv",
		"/Users/researcher/Documents/v2_variants.csv",
		"/Users/researcher/Documents/exp_setup.txt",
		"/Users/researcher/Documents/commands/analyse_chained_evaluation_shorter.txt",
		"/Users/researcher/Documents/commands/analyse_chained_evaluation.txt",
		"/Users/researcher/Downloads/75ba7633-4f77-46b4-b75b-223915c43f23.txt",
		"/Users/researcher/Documents/Proposal on Chained Evaluation wf failures",
		"/Users/researcher/Documents/new CVR onsite options.txt",
		"/Users/researcher/local/1.txt",
		"/Users/researcher/Library/Application Support/Sublime Text/Packages/Default/Preferences.sublime-settings",
		"/Users/researcher/Library/Application Support/Sublime Text/Packages/User/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 110.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"training",
			"binary_classification",
			"binary",
			"binary_",
			"visuali",
			"visualize",
			"forward",
			"cvr_prob_d",
			"cvr_label",
			"\\\\n",
			"OUTPUT_TABLE_RETENTION",
			"device",
			"GraphConv",
			"Conv"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"cta_prob_d",
			"cta_label",
			"\\n",
			"output_table_retention"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 708,
						"regions":
						{
						},
						"selection":
						[
							[
								708,
								708
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"gutter": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/training/train_eval.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5106,
						"regions":
						{
						},
						"selection":
						[
							[
								491,
								491
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/visualization/visualization.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1313,
						"regions":
						{
						},
						"selection":
						[
							[
								842,
								842
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/dataset/split.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 775,
						"regions":
						{
						},
						"selection":
						[
							[
								345,
								345
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										344,
										345
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										336,
										337
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/captum.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12489,
						"regions":
						{
						},
						"selection":
						[
							[
								1962,
								1962
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/gnn_explainer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11149,
						"regions":
						{
						},
						"selection":
						[
							[
								1513,
								1513
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 100.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6899,
						"regions":
						{
						},
						"selection":
						[
							[
								474,
								474
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7834,
						"regions":
						{
						},
						"selection":
						[
							[
								3719,
								3740
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1536.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/explainer.py",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 10375,
						"regions":
						{
						},
						"selection":
						[
							[
								1512,
								1526
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 390.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/explain/algorithm/captum_explainer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6540,
						"regions":
						{
						},
						"selection":
						[
							[
								425,
								425
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										426,
										427
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										317,
										318
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/researcher/miniconda3/lib/python3.10/site-packages/torch_geometric/nn/conv/sage_conv.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5813,
						"regions":
						{
						},
						"selection":
						[
							[
								1678,
								1678
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.autopep8":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "GNN.sublime-project",
	"replace":
	{
		"height": 76.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fake",
				"torch_geometric/datasets/fake.py"
			],
			[
				"one_",
				"torch_geometric/transforms/one_hot_degree.py"
			],
			[
				"fake.py",
				"torch_geometric/datasets/fake.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 271.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
